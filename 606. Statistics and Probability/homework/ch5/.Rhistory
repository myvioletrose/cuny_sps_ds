df
print("apple")[1]
if(!require(stringr)){install.packages("stringr"); require(stringr)}
ls(pos = "package:stringr")
?str_split
str_split("apple", "")
str_split("apple", "", simplify = T)
str_split("apple", "")[[1]]
str_split("apple", "")[[1]][5]
str_split("apple", "")[[1]] %>% length
?tolower
string <- "Apple"
string <- tolower(string)
string
s <- stringr::str_split(string, "")[[1]]
s
length(s):1
print(s)[length(s):1]
print(s[length(s):1])
?paste
print(s[length(s):1]) %>% paste0
s[length(s):1]
s[length(s):1] %>% paste0(., "")
s
s.reverse <- s[length(s):1]
s == s.reverse
xor(s == s.reverse)
isTRUE(xor(s == s.reverse))
xor(s, s.reverse)
isTRUE(s, s.reverse)
s == s.reverse
s == s.reverse
class(s == s.reverse)
ifelse(s == s.reverse){print "TRUE"}
?any
any(s == s.reverse)
all(s == s.reverse)
palindrome <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- tolower(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
return(all(s == s.reverse))
}
palindrome("Apple")
palindrome("Otto")
palindrome("Level")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- tolower(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
palindrome_check("Level")
palindrome_check("Jimmy")
"apple" == "apple"
"apple" == "applE"
word_check <- function(string1, string2){
string1 <- tolower(string1)
string2 <- tolower(string2)
string1 == string2
}
word_check("apple", "applE")
word_check("ORANGE", "applE")
?str_trunc
str_trunc(" apple")
ls(pos = "package:stringr")
str_trim("apple ")
str_to_lower("APPLE")
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- string::str_to_lower(string1)
string1 <- string::str_trim(string1)
string2 <- string::str_to_lower(string2)
string2 <- string::str_trim(string2)
string1 == string2
}
word_check("apple", "applE")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- stringr::str_to_lower(string)
string <- stringr::str_trim(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
string2 <- stringr::str_trim(string2)
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check("apple", "applE")
word_check("ORANGE", "applE")
word_check(" apple", "applE")
word_check(" appl e", "applE")
word_check(" apple ", "applE")
word_check(" apple", "applE ")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- stringr::str_to_lower(string)
string <- stringr::str_trim(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
palindrome_check("civil ")
palindrome_check("civic ")
palindrome_check("OTTO ")
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check(" apple", "applE ")
word_check("ORANGE", "applE")
A <- matrix(c(4, -4, 5, 6, -1, 0, -2, 2, -3),
3,
3,
byrow = TRUE)
A
b <- c(-34, -6, 19)
install.packages(matlib)
install.packages("matlib")
?showEqn
?showeqn
ls(pos = "package:matlib")
library(matlib)
ls(pos = "package:matlib")
?showEqn
matlib::showEqn(A, b)
solve(A, b)
solve(A) %*% b
A
if(!require(matlib)){install.packages("matlib"); require(matlib)}
solve(A, b)
palindrome_check("Level ")
st = 'Create a list of the first letters of every word in this string'
ls()
library(stringr)
?str_split
str_split(st, " ")
str_split(st, " ") %>%
class
str_split(st, " ") %>%
map(., function(x) x[1])
str_split(st, " ") %>%
map(., function(x) {x[1]})
str_split(st, " ") %>%
map(., function(x) {x[[1]})
ls(pos = "package:stringr")
df <- str_split(st, " ")
df
df[1][1]
df[1][2]
df[[1]][1]
map(df, function(x) {print(x)[1]})
library(purrr)
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[[1]]})
df
df
map(df, function(x) {print(x)[1][[1]]})
map(df, function(x) {print(x)[1][1]})
df[1]
df[1][1]
df[1][1][1]
df %>% unlist
str_split("Create", "")
length(df[[1]])
unlist(df)
unlist(df) %>% length
unlist(df)[1]
str_split(unlist(df)[1])
str_split(unlist(df)[1], "")
str_split(unlist(df)[1], "")[1]
str_split(unlist(df)[1], "")[[1]]
str_split(unlist(df)[1], "")[[1]][1]
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
lapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
library(purrr)
ls(pos = "package:purrr")
m <- c(1, 2, 3, -4)
reduce(m, *)
reduce(m, "*")
accumulate(m, "*")
accumulate(m, "+")
m <- c(1, 2, 3, -4)
m
?accumulate
accumulate(m, `+`)
reduce(m, `*`)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
library(stringr)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(s == s[length(s):1])
}
palindrome('helleh')
palindrome('helleh!')
map(c('helleh', 'nurses run'), palindrom)
map(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh!', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
s <- 'I am Batman'
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s
s %in% letters
letters %in% s
all(letters %in% s)
ispangram <- function(s){
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(letters %in% s)
}
ispangram("The quick brown fox jumps over the lazy dog")
remove.packages("httpuv")
.libPaths()
devtools::install_github("jbryer/DATA606")
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
length(df$value)
df
df$odds[2]
df$value[1]
for (i in 1:length(df$value)){
print( paste0("Financial Advisors are ", round(df$odds[i], 2), " more likely to be interested in ", df$value[i]) )
}
library(broom)
ls(pos = "package:broom")
?inflate
data("mtcars")
head(mtcars)
boxplot(mpg)
boxplot(mpg, data = mtcars)
boxplot(mtcars$mpg, data = mtcars)
attach(mtcars)
sapply(mtcars, unique)
?crossing
library(broom)
?crossing
boxplot(mtcars$mpg, data = mtcars)
IQR(mpg)
boxplot(mtcars$mpg ~ vs, data = mtcars)
IQR(mpg ~ vs)
sapply(c(mpg, wt), IQR)
sapply(mtcars[, c(mpg, wt)], IQR)
mtcars[, c(mpg, wt)]
mtcars[, c("mpg", "wt")]
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars[, c("mpg", "wt")], IQR)
par(mar = c(1, 2))
par(mfrow = c(1, 2))
boxplot(mpg, col = 'red')
boxplot(wt, col = 'blue')
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars, unique)
sapply(mtcars, length(unique))
sapply(mtcars, function(x) length(unique(x)))
crossing(cyl, vs)
broom::crossing(cyl, vs)
search()
?crossing
library(tidyr)
tidyr::crossing(cyl, vs)
expand.grid(cyl, vs)
dim(mtcars)
df <- expand.grid(cyl, vs)
dim(df)
head9df
head(df)
sapply(df, unique)
df$combo <- paste(df$var1, df$Var2)
head(df)
df$combo <- paste(df$Var1, df$Var2)
head(df)
sapply(df, unique)
table(df$combo)
df$combo <- paste(df$Var1, df$Var2, sep = "-")
table(df$combo)
table(cyl, vs)
sapply(mtcars, function(x) length(unique(x)))
tidyr::crossing(cyl, vs)
?crossing
?plot
library(DATA606)
shiny_demo('DualScales', package = 'DATA606')
library(rlang)
library(ggplot2)
library(ggplot2)
shiny_demo('DualScales', package = 'DATA606')
install.packages('widyr')
library(widyr)
?pairwise_similarity
?inner_join
data(breslow.dat, package = "robust")
install.packages("robust"); library(robust)
data(breslow.dat, package = "robust")
attach(brewslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = brewslow.dat, family = poisson())
summary(fit)
attach(brewslow.dat)
data(breslow.dat, package = "robust")
ls()
head(breslow.dat)
attach(breslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
fit <- glm(sumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
?predict
?base::predict
summary(breslow.dat)
summary(breslow.dat)
head(breslow.dat)
ob <- data.frame(Base = c(22, 41), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
exp(coef(fit))
1.023 ^ 10
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "placebo"))
predict(fit, ob)
1.0229102 ^ 20 + 1.0230007 ^ 40 + 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1 / 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) + (1.0230007 ^ 40) + 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
exp(coef(fit))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
exp(0.8583864)
coef(fit)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
exp(1.94882593) * exp(0.02265174 ^ 20) * exp(0.02274013 ^ 40) * exp(-0.15270095)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 30), Trt = c("placebo", "progabide"))
exp(predict(fit, ob))
(21.84 - 18.75) / 21.84
library(tidyverse)
library(Rcpp)
library(dplyr)
update.packages()
library(DATA606)
library(tidyverse)
update.packages()
quit
quit()
library(tidyverse)
remove.packages("Rcpp")
install.packages("Rcpp")
library(tidyverse)
library(DATA606)
install.packages("digest")
library(DATA606)
library(dplyr)
remove.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("yaml", dependencies = T)
library(dplyr)
install.packages("purrr")
library(purrr)
library(dplyr)
ls(pos = "package:dplyr")
library(dplyr)
library(DATA606)
install.packages("later")
library(DATA606)
library(Rcpp)
library(DATA606)
install.packages("later")
install.packages("later", dependencies = T)
install.packages("later", dependencies = T, TRUE)
install.packages("installr") # install
install.packages("installr") # install
installr::updateR(T) # updating R.
quit()
RStudio.Version()
library(radix)
update.packages("radix")
library(radix)
ls(pos = "package:radix")
library(reticulate)
conda_list()
use_condaenv("anaconda3")
library(tidyverse)
py$data %>%
as.tibble() %>%
glimpse()
library(tidyverse)
library(tidyquant) # for theme_tq()
# Manipulate data for ggplot
results_tbl <- tibble(
y_test = py$y_test,
y_pred = py$y_pred
) %>%
rowid_to_column() %>%
arrange(y_test) %>%
mutate(rowid = as_factor(as.character(rowid))) %>%
rowid_to_column("sorted_rowid") %>%
gather(key = "key", value = "value", -c(rowid, sorted_rowid))
# Make ggplot
results_tbl %>%
ggplot(aes(sorted_rowid, value, color = key)) +
geom_point(alpha = 0.5) +
geom_smooth() +
theme_tq() +
scale_color_tq() +
labs(
title = "Prediction Versus Actual",
subtitle = "Wine Quality Level",
x = "Sorted RowID", y = "Quality Level"
)
results_tbl %>%
# Manipulation
spread(key, value) %>%
mutate(resid = y_pred - y_test) %>%
# Plot
ggplot(aes(sorted_rowid, resid, color = as.character(y_test))) +
geom_point(alpha = 0.5) +
theme_tq() +
scale_color_tq() +
labs(
title = "Residual Analysis (Prediction - Actual)",
subtitle = "Wine Quality Level",
x = "Sorted Row ID", y = "Residual",
color = "Quality Level"
)
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/homework/ch5")
8.887/sqrt(200)
(8.887/sqrt(200)) * 1.96
-0.545 + 1.231675
-0.545 - 1.231675
19.85 - 16.12
sqrt(((3.58)^2)/26 + ((4.51)^2)/26)
1.96 * sqrt(((3.58)^2)/26 + ((4.51)^2)/26)
3.73 + 2.213369
3.73 - 2.213369
1172 - 5
0.0025 / 0.0013
501.54 * (1 / 4)
501.54 * 4
501.54 * 4
(1 / 1167) * 267382
2006.16 / 229.1191
501.54 / 229.1191
4 + 1167
2006.16 + 267382
