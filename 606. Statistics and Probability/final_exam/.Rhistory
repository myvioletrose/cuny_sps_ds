"data4.x.mean", "data4.y.mean")
calculation <- function(x, y, z) {
z <- rlang::enquo(z)
for(i in 1:length(y)){
map(c(x),
function(x) !!z[i] <<- round(x(y[[i]]), 2)
)
}
}
calculation(mean, dataList, variables.mean)
calculation <- function(x, y, z) {
z <- rlang::enquo(z)
for(i in 1:length(y)){
map(c(x),
function(x) z[i] <<- round(x(y[[i]]), 2)
)
}
}
variables.mean <- c("data1.x.mean", "data1.y.mean",
"data2.x.mean", "data2.y.mean",
"data3.x.mean", "data3.y.mean",
"data4.x.mean", "data4.y.mean")
calculation(mean, dataList, variables.mean)
data1.x.mean
calculation <- function(x, y, z) {
# z <- rlang::enquo(z)
for(i in 1:length(y)){
map(c(x),
function(x) z[i] <<- round(x(y[[i]]), 2)
)
}
}
calculation(mean, dataList, variables.mean)
data1.x.mean
ls()
variables.mean
variables.mean
variables.mean <- c(data1.x.mean = NA, data1.y.mean = NA,
data2.x.mean = NA, data2.y.mean = NA,
data3.x.mean = NA, data3.y.mean = NA,
data4.x.mean = NA, data4.y.mean = NA)
calculation <- function(x, y, z) {
# z <- rlang::enquo(z)
for(i in 1:length(y)){
map(c(x),
function(x) z[i] <<- round(x(y[[i]]), 2)
)
}
}
calculation(mean, dataList, variables.mean)
data1.x.mean
variables.mean
variables.mean[1]
calculation <- function(x, y, z) {
# z <- rlang::enquo(z)
for(i in 1:length(y)){
map(c(x),
function(x) z[[i]] <- round(x(y[[i]]), 2)
)
}
}
variables.mean <- list(data1.x.mean = NA, data1.y.mean = NA,
data2.x.mean = NA, data2.y.mean = NA,
data3.x.mean = NA, data3.y.mean = NA,
data4.x.mean = NA, data4.y.mean = NA)
calculation(mean, dataList, variables.mean)
variables.mean[1]
variables.mean
calculation <- function(x, y, z) {
# z <- rlang::enquo(z)
for(i in 1:length(y)){
map(c(x),
function(x) z[i] <- round(x(y[[i]]), 2)
)
}
}
calculation(mean, dataList, variables.mean)
variables.mean[1]
?map2
calculation <- function(x, y, z) {
map2(x, y, function(x, y){
for(i in 1:length(z)){
z[[i]] <- round(x(y[[i]]), 2)
}
})
}
calculation <- function(x, y, z) {
purrr::map2(x, y, function(x, y){
for(i in 1:length(x)){
x[[i]] <- round(z(y[[i]]), 2)
}
})
}
calculation(variables.mean, dataList, mean)
calculation <- function(x, y, z) {
purrr::map2(x, y, function(x, y){
for(i in 1:length(x)){
x[[i]] <- round(mean(y[[i]]), 2)
}
})
}
calculation(variables.mean, dataList, mean)
dataList <- list(d1x = data1$x, d1y = data1$y,
d2x = data2$x, d2y = data2$y,
d3x = data3$x, d3y = data3$y,
d4x = data4$x, d4y = data4$y)
variables.mean <- list(data1.x.mean = NA, data1.y.mean = NA,
data2.x.mean = NA, data2.y.mean = NA,
data3.x.mean = NA, data3.y.mean = NA,
data4.x.mean = NA, data4.y.mean = NA)
calculation <- function(x, y, z) {
purrr::map2(x, y, function(x, y){
for(i in 1:length(x)){
x[[i]] <- round(mean(y[[i]]), 2)
}
})
}
calculation(variables.mean, dataList, mean)
variables.mean[1]
variables.mean[[1]]
names(variables.mean)[1]
names(variables.mean)[[1]]
names(variables.mean)
?assign
calculation <- function(x, y, z) {
for(i in 1:length(y)){
map(c(x),
function(x) {
round(x(y[[i]]), 2) %.>%
assign(names(z)[i], .)
}
)
}
}
calculation(mean, dataList, variables.mean)
ls()
dataList <- list(d1x = data1$x, d1y = data1$y,
d2x = data2$x, d2y = data2$y,
d3x = data3$x, d3y = data3$y,
d4x = data4$x, d4y = data4$y)
variables.mean <- list(data1.x.mean = NA, data1.y.mean = NA,
data2.x.mean = NA, data2.y.mean = NA,
data3.x.mean = NA, data3.y.mean = NA,
data4.x.mean = NA, data4.y.mean = NA)
calculation <- function(x, y, z) {
for(i in 1:length(y)){
map(c(x),
function(x) {
round(x(y[[i]]), 2) %.>%
assign(names(z)[i], .)
}
)
}
}
calculation(mean, dataList, variables.mean)
variables.mean
names(variables.mean)
calculation <- function(x, y, z) {
for(i in 1:length(y)){
map(c(x),
function(x) {
round(x(y[[i]]), 2) %.>%
assign(names(z)[i], ., envir = .GlobalEnv)
}
)
}
}
calculation(mean, dataList, variables.mean)
ls()
data1.x.mean
mean(data1$x)
# set up list
dataList <- list(d1x = data1$x, d1y = data1$y,
d2x = data2$x, d2y = data2$y,
d3x = data3$x, d3y = data3$y,
d4x = data4$x, d4y = data4$y)
# set up function
calculation <- function(x, y, z) {
if(!require(purrr)){install.packages("purrr"); require(purrr)}
if(!require(wrapr)){install.packages("wrapr"); require(wrapr)}
for(i in 1:length(y)){
purrr::map(c(x),
function(x) {
round(x(y[[i]]), 2) %.>%
assign(names(z)[i], ., envir = .GlobalEnv)
}
)
}
}
# set up names for global environment
variables.mean <- list(data1.x.mean = NA, data1.y.mean = NA,
data2.x.mean = NA, data2.y.mean = NA,
data3.x.mean = NA, data3.y.mean = NA,
data4.x.mean = NA, data4.y.mean = NA)
# run the function, assign result to each variable name back to global environment
calculation(mean,
dataList,
variables.mean)
ls()
data2.x.mean
data4.x.mean
data4.y.mean
mean(data4$x)
mean(data4$y)
# set up names for global environment
variables.median <- list(data1.x.median = NA, data1.y.median = NA,
data2.x.median = NA, data2.y.median = NA,
data3.x.median = NA, data3.y.median = NA,
data4.x.median = NA, data4.y.median = NA)
# run the function, assign result to each variable name back to global environment
calculation(median,
dataList,
variables.median)
map(c(median), dataList)
map(c(median), function(x) round(x(dataList), 2))
lapply(dataList, median)
lapply(dataList, median)
lapply(dataList, mean)
data3.x.mean
data2.x.median
data2.y.median
data3.y.median
print(data1.x.mean)
variables.mean
# set up names for global environment
variables.sd <- list(data1.x.sd = NA, data1.y.sd = NA,
data2.x.sd = NA, data2.y.sd = NA,
data3.x.sd = NA, data3.y.sd = NA,
data4.x.sd = NA, data4.y.sd = NA)
# run the function, assign result to each variable name back to global environment
calculation(sd,
dataList,
variables.sd)
data1.x.sd
print(names(variables.mean))
print(eval(names(variables.mean)))
eval(names(variables.mean))
eval(data1.x.mean)
lapply(names(variables.mean), eval)
lapply(c(names(variables.mean)), eval)
lapply(c(parse(names(variables.mean))), eval)
lapply(c(names(variables.mean)), function(x) eval(parse(x)))
eval(names(variables.mean)[1])
eval(parse(names(variables.mean)[1]))
eval(quote(names(variables.mean)[1]))
eval(deparse(names(variables.mean)[1]))
# eval(deparse(names(variables.mean)[1]))
names(variables.mean)[1]
sym(names(variables.mean)[1])
eval(sym(names(variables.mean)[1]))
?sym
rlang::sym(names(variables.mean)) %>% eval
rlang::sym(names(variables.mean))
rlang::sym(names(variables.mean))
names(variables.mean)
for(i in 1:length(variables.mean)){
eval(sym(names(variables.mean[i])))
}
print(eval(sym(names(variables.mean[i]))))
length(variables.mean)
names(variables.mean)[[1]]
names(variables.mean)[1]
print(eval(sym(names(variables.mean[i]))))
for(i in 1:length(variables.mean)){
print(eval(sym(names(variables.mean[i]))))
}
for(i in 1:length(variables.mean)){
print(eval(sym(names(variables.mean[i]))))
}
for(i in 1:length(variables.mean)){
print(paste0(names(variables.mean),
" is equal to ",
eval( sym(names(variables.mean[i])) )
))
}
for(i in 1:length(variables.mean)){
print(paste0(names(variables.mean)[i],
" is equal to ",
eval( sym(names(variables.mean[i])) )
))
}
lapply(dataList, mean)
# set up names for global environment
variables.mean <- list(data1.x.mean = NA, data1.y.mean = NA,
data2.x.mean = NA, data2.y.mean = NA,
data3.x.mean = NA, data3.y.mean = NA,
data4.x.mean = NA, data4.y.mean = NA)
# run the function, assign result to each variable name back to global environment
calculation(mean,
dataList,
variables.mean)
# print results
for(i in 1:length(variables.mean)){
if(!require(rlang)){install.packages("rlang"); require(rlang)}
print(paste0(names(variables.mean)[i],
" is equal to ",
eval( rlang::sym(names(variables.mean[i])) )
))
}
# set up names for global environment
variables.median <- list(data1.x.median = NA, data1.y.median = NA,
data2.x.median = NA, data2.y.median = NA,
data3.x.median = NA, data3.y.median = NA,
data4.x.median = NA, data4.y.median = NA)
# run the function, assign result to each variable name back to global environment
calculation(median,
dataList,
variables.median)
# print results
for(i in 1:length(variables.median)){
if(!require(rlang)){install.packages("rlang"); require(rlang)}
print(paste0(names(variables.median)[i],
" is equal to ",
eval( rlang::sym(names(variables.median[i])) )
))
}
lapply(dataList, median)
data4.y.median
# set up names for global environment
variables.sd <- list(data1.x.sd = NA, data1.y.sd = NA,
data2.x.sd = NA, data2.y.sd = NA,
data3.x.sd = NA, data3.y.sd = NA,
data4.x.sd = NA, data4.y.sd = NA)
# run the function, assign result to each variable name back to global environment
calculation(sd,
dataList,
variables.sd)
# print results
for(i in 1:length(variables.sd)){
if(!require(rlang)){install.packages("rlang"); require(rlang)}
print(paste0(names(variables.sd)[i],
" is equal to ",
eval( rlang::sym(names(variables.sd[i])) )
))
}
lapply(dataList, sd)
data1
cor.test(data1)
lapply(dfList, function(x) cor.test(x$x, x$y))
dfList <- list(df1 = data1,
df2 = data2,
df3 = data3,
df4 = data4)
lapply(dfList, function(x) cor.test(x$x, x$y))
ls(pos = "package:wrapr")
options(digits = 2)
library(tidyverse)
data1.correlation <- round(cor(data1$x, data1$y), 2)
data2.correlation <- round(cor(data2$x, data2$y), 2)
data3.correlation <- round(cor(data3$x, data3$y), 2)
data4.correlation <- round(cor(data4$x, data4$y), 2)
# create a list for the data.frames
dfList <- list(df1 = data1,
df2 = data2,
df3 = data3,
df4 = data4)
# print detail cor.test result
lapply(dfList, function(x) cor.test(x$x, x$y))
model <- lm(y ~ x, data1)
model
summary(model)
attributes(model)
model$slope
?slope
summary(model)
coef(model)
coef(model)[1]
lm(y ~ x, data1) %>% coef(.)[1]
lm(y ~ x, data1) %.>% coef(.)
lm(y ~ x, data1) %.>% coef(.)[1]
data1.slope <- lm(y ~ x, data1) %.>% coef(.)[1]
data2.slope <- lm(y ~ x, data2) %.>% coef(.)[1]
data3.slope <- lm(y ~ x, data3) %.>% coef(.)[1]
data4.slope <- lm(y ~ x, data4) %.>% coef(.)[1]
data1.intercept <- lm(y ~ x, data1) %.>% coef(.)[2]
data2.intercept <- lm(y ~ x, data2) %.>% coef(.)[2]
data3.intercept <- lm(y ~ x, data3) %.>% coef(.)[2]
data4.intercept <- lm(y ~ x, data4) %.>% coef(.)[2]
model
summary(model)
attributes(model)
model$r.squared
summary(model)$r.squared
lm(y ~ x, data1) %.>% summary(.)$r.squared
rm(model)
data1.rsquared <- lm(y ~ x, data1) %.>% summary(.)$r.squared
data2.rsquared <- lm(y ~ x, data2) %.>% summary(.)$r.squared
data3.rsquared <- lm(y ~ x, data3) %.>% summary(.)$r.squared
data4.rsquared <- lm(y ~ x, data4) %.>% summary(.)$r.squared
##### DO NOT MODIFY THIS R BLOCK! ######
# This R block will create a table to display all the calculations above in one table.
library(knitr)
library(kableExtra)
results <- data.frame(
data1.x = c(data1.x.mean, data1.x.median, data1.x.sd, data1.correlation, data1.intercept, data1.slope, data1.rsquared),
data1.y = c(data1.y.mean, data1.y.median, data1.y.sd, NA, NA, NA, NA),
data2.x = c(data2.x.mean, data2.x.median, data2.x.sd, data2.correlation, data2.intercept, data2.slope, data2.rsquared),
data2.y = c(data2.y.mean, data2.y.median, data2.y.sd, NA, NA, NA, NA),
data3.x = c(data3.x.mean, data3.x.median, data3.x.sd, data3.correlation, data3.intercept, data3.slope, data3.rsquared),
data3.y = c(data3.y.mean, data3.y.median, data3.y.sd, NA, NA, NA, NA),
data4.x = c(data4.x.mean, data4.x.median, data4.x.sd, data4.correlation, data4.intercept, data4.slope, data4.rsquared),
data4.y = c(data4.y.mean, data4.y.median, data4.y.sd, NA, NA, NA, NA),
stringsAsFactors = FALSE
)
row.names(results) <- c('Mean', 'Median', 'SD', 'r', 'Intercept', 'Slope', 'R-Squared')
names(results) <- c('x','y','x','y','x','y','x','y')
options(knitr.kable.NA = '')
kable(results, digits = 2,
align = 'r',
row.names = TRUE,
format.args=list(nsmall = 2)) %>%
column_spec(2:9, width = ".35in") %>%
add_header_above(c(" " = 1, "Data 1" = 2, "Data 2" = 2, "Data 3" = 2, "Data 4" = 2))
# model 1 for data1
model1 <- lm(y ~ x, data1)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data1, main = "data1")
# histogram of the residuals
hist(model1$residuals)
# qqplot
qqnorm(model1$residuals)
qqline(model1$residuals)
# homoscedasticity check
plot(resid(model1))
abline(h = 0)
# model 1 for data1
model1 <- lm(y ~ x, data1)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data1, main = "data1")
# histogram of the residuals
hist(model1$residuals)
# qqplot
qqnorm(model1$residuals)
qqline(model1$residuals)
# homoscedasticity check
plot(resid(model1), main = "constant variance check")
abline(h = 0)
# model 1 for data1
model1 <- lm(y ~ x, data1)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data1, main = "data1")
# histogram of the residuals
hist(model1$residuals, breaks = 5)
# qqplot
qqnorm(model1$residuals)
qqline(model1$residuals)
# homoscedasticity check
plot(resid(model1), main = "constant variance check")
abline(h = 0)
# model 1 for data1
model1 <- lm(y ~ x, data1)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data1, main = "data1")
# histogram of the residuals
hist(model1$residuals)
# qqplot
qqnorm(model1$residuals)
qqline(model1$residuals)
# homoscedasticity check
plot(resid(model1), main = "constant variance check")
abline(h = 0)
# model 2 for data2
model2 <- lm(y ~ x, data2)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data2, main = "data2")
# histogram of the residuals
hist(model2$residuals)
# qqplot
qqnorm(model2$residuals)
qqline(model2$residuals)
# homoscedasticity check
plot(resid(model2), main = "constant variance check")
abline(h = 0)
# model 3 for data3
model3 <- lm(y ~ x, data3)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data3, main = "data3")
# histogram of the residuals
hist(model3$residuals)
# qqplot
qqnorm(model3$residuals)
qqline(model3$residuals)
# homoscedasticity check
plot(resid(model3), main = "constant variance check")
abline(h = 0)
# model 4 for data4
model4 <- lm(y ~ x, data4)
# set up
par(mfrow = c(2, 2))
# scatterplot of the raw data
plot(data4, main = "data4")
# histogram of the residuals
hist(model4$residuals)
# qqplot
qqnorm(model4$residuals)
qqline(model4$residuals)
# homoscedasticity check
plot(resid(model4), main = "constant variance check")
abline(h = 0)
data4
