cat(custom_stop_words, sep = ", ")
unlist(custom_stop_words)
paste(unlist(custom_stop_words), collapse = " ")
paste(unlist(custom_stop_words), sep = ", ", collapse = " ")
paste(unlist(custom_stop_words), sep = ", ")
test <- c("analyst analysts april article articles august bloomberg bloombergbloomberg bloombergbloombergs bloombergs bloombergsbloombergs business businesses click clicked clicks comment commented commenting comments companies company contact contacts countries country day days dayto december donald editor editors february fellto friday front include included includes including its january journalist journalists july june march market markets may monday november october ofbillion ofbillions ofmillion ofmillions opinion opinions orpercent people percent person photographer photographers report reported reporter reporters reporting reports responsible saturday sell selling sells september sold source sources statement statements stories story sunday talk talked talking talks tell telling tells thursday toeuro toeuros told topercent topercents tousd trump tuesday wednesday week weeks weekto world worlds year years yearto")
library(tidyverse)
?separate
separate
test %>%
separate(., sep = " ")
test %>%
as.data.frame %>%
separate(., sep = " ")
test %>%
as.data.frame
t <- test %>%
as.data.frame
head(t)
str(t)
library(stringr)
test %>% str_split(pattern = " ", test)
test %>% str_split(pattern = " ", test) %>% unlist
test %>% str_split(., pattern = " ")
test2 %>% stringr::str_split(., pattern = " ")
test2 <- test %>% stringr::str_split(., pattern = " ")
custom_stop_words == test2
custom_stop_words
paste(unlist(custom_stop_words), sep = ", ")
paste(unlist(custom_stop_words), collapse = ", ")
test <- paste(unlist(custom_stop_words), collapse = ", ")
test
write.csv(test, "clipboard", row.names = F)
test2 <- test %>% stringr::str_split(., pattern = ", ")
test2
class(test)
one_quote <- paste(unlist(custom_stop_words), collapse = ", ")  # the custom stop words list from xlsx
unquote <- one_quote %>%
stringr::str_split(., pattern = ", ")
custom_stop_words == unquote
unquote
unquote <- one_quote %>%
stringr::str_split(., pattern = ", ") %>%
unlist
unquote
custom_stop_words == unquote
which(!custom_stop_words == unquote)
stop_words <- c("analyst, analysts, april, article, articles, august, bloomberg, bloombergbloomberg, bloombergbloombergs, bloombergs, bloombergsbloombergs, business, businesses, click, clicked, clicks, comment, commented, commenting, comments, companies, company, contact, contacts, countries, country, day, days, dayto, december, donald, editor, editors, february, fellto, friday, front, include, included, includes, including, its, january, journalist, journalists, july, june, march, market, markets, may, monday, november, october, ofbillion, ofbillions, ofmillion, ofmillions, opinion, opinions, orpercent, people, percent, person, photographer, photographers, report, reported, reporter, reporters, reporting, reports, responsible, saturday, sell, selling, sells, september, sold, source, sources, statement, statements, stories, story, sunday, talk, talked, talking, talks, tell, telling, tells, thursday, toeuro, toeuros, told, topercent, topercents, tousd, trump, tuesday, wednesday, week, weeks, weekto, world, worlds, year, years, yearto")
stop_words <- stop_words %>%
stringr::str_split(., pattern = ", ") %>%
unlist
custom_stop_words <- tibble(word = stop_words)
custom_stop_words
q()
ls()
rm(list = ls())
param1 <- 1
exists(c("param1", "param2", "param3", "param4", "param5", "param6", "j_sql", "j_body", "j"))
if(exists(c("param1", "param2", "param3", "param4", "param5", "param6", "j_sql", "j_body", "j"))){
rm(param1, param2, param3, param4, param5, param6, j_sql, j_body, j)
}
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
rm(list = ls())
library(plotly)
?ggplotly
ls()
getwd()
ls()
ls()
library(plyr)
?ldply
?ldply
Name <- c("Adam", "Peter", "Julia", "Ron")
Courses <- c("Math, Physics, Chemistry", "English, History, Sociology", "Physics, Botany, Chemistry", "Chemistry, Physics, Biology")
df <- data.frame(Name, Courses)
df
names(df)
df2 <- data.frame(Name = "Stephanie", Courses = "Math, Geography, Chemistry")
df2
df <- rbind(df, df2)
df
df$Total_Score <- c(90, 65, 80, 75, 85)
df
print("apple")[1]
if(!require(stringr)){install.packages("stringr"); require(stringr)}
ls(pos = "package:stringr")
?str_split
str_split("apple", "")
str_split("apple", "", simplify = T)
str_split("apple", "")[[1]]
str_split("apple", "")[[1]][5]
str_split("apple", "")[[1]] %>% length
?tolower
string <- "Apple"
string <- tolower(string)
string
s <- stringr::str_split(string, "")[[1]]
s
length(s):1
print(s)[length(s):1]
print(s[length(s):1])
?paste
print(s[length(s):1]) %>% paste0
s[length(s):1]
s[length(s):1] %>% paste0(., "")
s
s.reverse <- s[length(s):1]
s == s.reverse
xor(s == s.reverse)
isTRUE(xor(s == s.reverse))
xor(s, s.reverse)
isTRUE(s, s.reverse)
s == s.reverse
s == s.reverse
class(s == s.reverse)
ifelse(s == s.reverse){print "TRUE"}
?any
any(s == s.reverse)
all(s == s.reverse)
palindrome <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- tolower(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
return(all(s == s.reverse))
}
palindrome("Apple")
palindrome("Otto")
palindrome("Level")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- tolower(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
palindrome_check("Level")
palindrome_check("Jimmy")
"apple" == "apple"
"apple" == "applE"
word_check <- function(string1, string2){
string1 <- tolower(string1)
string2 <- tolower(string2)
string1 == string2
}
word_check("apple", "applE")
word_check("ORANGE", "applE")
?str_trunc
str_trunc(" apple")
ls(pos = "package:stringr")
str_trim("apple ")
str_to_lower("APPLE")
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- string::str_to_lower(string1)
string1 <- string::str_trim(string1)
string2 <- string::str_to_lower(string2)
string2 <- string::str_trim(string2)
string1 == string2
}
word_check("apple", "applE")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- stringr::str_to_lower(string)
string <- stringr::str_trim(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
string2 <- stringr::str_trim(string2)
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check("apple", "applE")
word_check("ORANGE", "applE")
word_check(" apple", "applE")
word_check(" appl e", "applE")
word_check(" apple ", "applE")
word_check(" apple", "applE ")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- stringr::str_to_lower(string)
string <- stringr::str_trim(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
palindrome_check("civil ")
palindrome_check("civic ")
palindrome_check("OTTO ")
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check(" apple", "applE ")
word_check("ORANGE", "applE")
A <- matrix(c(4, -4, 5, 6, -1, 0, -2, 2, -3),
3,
3,
byrow = TRUE)
A
b <- c(-34, -6, 19)
install.packages(matlib)
install.packages("matlib")
?showEqn
?showeqn
ls(pos = "package:matlib")
library(matlib)
ls(pos = "package:matlib")
?showEqn
matlib::showEqn(A, b)
solve(A, b)
solve(A) %*% b
A
if(!require(matlib)){install.packages("matlib"); require(matlib)}
solve(A, b)
palindrome_check("Level ")
st = 'Create a list of the first letters of every word in this string'
ls()
library(stringr)
?str_split
str_split(st, " ")
str_split(st, " ") %>%
class
str_split(st, " ") %>%
map(., function(x) x[1])
str_split(st, " ") %>%
map(., function(x) {x[1]})
str_split(st, " ") %>%
map(., function(x) {x[[1]})
ls(pos = "package:stringr")
df <- str_split(st, " ")
df
df[1][1]
df[1][2]
df[[1]][1]
map(df, function(x) {print(x)[1]})
library(purrr)
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[[1]]})
df
df
map(df, function(x) {print(x)[1][[1]]})
map(df, function(x) {print(x)[1][1]})
df[1]
df[1][1]
df[1][1][1]
df %>% unlist
str_split("Create", "")
length(df[[1]])
unlist(df)
unlist(df) %>% length
unlist(df)[1]
str_split(unlist(df)[1])
str_split(unlist(df)[1], "")
str_split(unlist(df)[1], "")[1]
str_split(unlist(df)[1], "")[[1]]
str_split(unlist(df)[1], "")[[1]][1]
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
lapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
library(purrr)
ls(pos = "package:purrr")
m <- c(1, 2, 3, -4)
reduce(m, *)
reduce(m, "*")
accumulate(m, "*")
accumulate(m, "+")
m <- c(1, 2, 3, -4)
m
?accumulate
accumulate(m, `+`)
reduce(m, `*`)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
library(stringr)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(s == s[length(s):1])
}
palindrome('helleh')
palindrome('helleh!')
map(c('helleh', 'nurses run'), palindrom)
map(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh!', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
s <- 'I am Batman'
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s
s %in% letters
letters %in% s
all(letters %in% s)
ispangram <- function(s){
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(letters %in% s)
}
ispangram("The quick brown fox jumps over the lazy dog")
remove.packages("httpuv")
.libPaths()
devtools::install_github("jbryer/DATA606")
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/R")
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/DATA606")
library(DATA606)
startLab('Lab0')
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/R")
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/DATA606")
library(DATA606)
startLab('Lab0')
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/R/Lab0")
source("more/arbuthnot.R")
ls()
dim(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
View(arbuthnot)
arbuthnot$boys
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
?plot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
5218 / 4683
5218 / 4683
arbuthnot$boys / arbuthnot$girls
5218 / (5218 + 4683)
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
arbuthnot$boys > arbuthnot$girls
source("more/present.R")
source("more/present.R")
ls()
attach(arbuthnot)
library(dplyr)
df <- arbuthnot %>%
mutate(ratio = boys / girls)
head(df)
?t.test
t.test(df$ratio, mu = 1, alt = "greater")
ls()
detach(arbuthnot)
rm(df)
ls()
names(present)
unique(present$year)
unique(present$year)  # here's a list of years included in the dataset
dim(present)
names(present)
unique(present$year)  # here's a list of years included in the dataset
dim(present)  # the dimension is 63 (rows) x 3 (columns)
names(present)
head(present)
mean(present$boys)
mean(present$boys) / mean(arbuthnot$boys)
mean(present$boys) / mean(arbuthnot$boys)
mean(present$girls) / mean(arbuthnot$girls)
print(paste0("the number of boys on average from a typical year from the present dataset is about ", round(mean(present$boys) / mean(arbuthnot$boys), 1), " times greater than the Arbuthnot's; similarly, the number of girls on average is about ", round(mean(present$girls) / mean(arbuthnot$girls), 1), " times greater than the Arbuthnot's", sep = "")
print(paste0("the number of boys on average from a typical year from the present dataset is about ", round(mean(present$boys) / mean(arbuthnot$boys), 1), " times greater than the Arbuthnot's; similarly, the number of girls on average is about ", round(mean(present$girls) / mean(arbuthnot$girls), 1), " times greater than the Arbuthnot's", sep = ""))
print( paste0("the number of boys on average from a typical year from the present dataset is about ", round(mean(present$boys) / mean(arbuthnot$boys), 1), " times greater than the Arbuthnot\'s; similarly, the number of girls on average is about ", round(mean(present$girls) / mean(arbuthnot$girls), 1), " times greater than the Arbuthnot\'s") )
unique(present$year)  # below is a list of years included in the dataset
dim(present)  # the dimension is 63 (rows) x 3 (columns)
names(present)  # these are the variables, i.e. "year", "boys", "girls"
print( paste0("the number of boys on average from a typical year from the present dataset is about ", round(mean(present$boys) / mean(arbuthnot$boys), 1), " times greater than the Arbuthnot\'s; similarly, the number of girls on average is about ", round(mean(present$girls) / mean(arbuthnot$girls), 1), " times greater than the Arbuthnot\'s") )
library(dplyr)
present <- present %>%
mutate(ratio = boys/girls)
with(present,
plot(year, ratio, type = "l")
)
mean(present$ratio)
library(dplyr)
present <- present %>%
mutate(ratio = boys/girls)
mean(present$ratio)
with(present,
plot(year, ratio, type = "l")
)
arbuthnot <- arbuthnot %>%
mutate(ratio = boys/girls)
library(dplyr)
present <- present %>%
mutate(ratio = boys/girls)
mean(present$ratio)  # 1.051353
with(present,
plot(year, ratio, type = "l")
)
arbuthnot <- arbuthnot %>%
mutate(ratio = boys/girls)
mean(arbuthnot$ratio)
t.test(mean(arbuthnot$ratio), mu = mean(present$ratio), alternative = "greater")
t.test(arbuthnot$ratio, mu = mean(present$ratio), alternative = "greater")
library(dplyr)
present <- present %>%
mutate(ratio = boys/girls)
mean(present$ratio)  # 1.051353
with(present,
plot(year, ratio, type = "l")
)
arbuthnot <- arbuthnot %>%
mutate(ratio = boys/girls)
mean(arbuthnot$ratio)  # 1.070748
t.test(present$ratio, mu = 1, alternative = "greater")
t.test(arbuthnot$ratio, mu = mean(present$ratio), alternative = "greater")
dim(present)
library(dplyr)
present <- present %>%
mutate(ratio = boys/girls)
mean(present$ratio)  # 1.051353
# plot
with(present,
plot(year, ratio, type = "l")
)
arbuthnot <- arbuthnot %>%
mutate(ratio = boys/girls)
mean(arbuthnot$ratio)  # 1.070748
# one-sample t.test
t.test(present$ratio, mu = 1, alternative = "greater")
t.test(arbuthnot$ratio, mu = mean(present$ratio), alternative = "greater")
# conclusion
# Arbuthnot's observation about boys being born in greater proportion than girls still hold true in the US. It's demonstrated by a one-sample t-test with 95% confidence interval and p-value < 2.2e-1. However, when comparing the ratio between Arbuthnot's observation with present observation, a one-sample t-test revealed that the Arbuthnot's ratio is statistically significantly greater. In other words, the boys-to-girls ratio is still larger than 1 (indicating more boys than girls); however, the ratio is getting smaller and not as big as Arbuthnot's.
present <- present %>%
mutate(babies = boys + girls) %>%
arrange(-babies) %>%
head
source("more/present.R")
library(dplyr)
present <- present %>%
mutate(ratio = boys/girls)
mean(present$ratio)  # 1.051353
# plot
with(present,
plot(year, ratio, type = "l")
)
arbuthnot <- arbuthnot %>%
mutate(ratio = boys/girls)
mean(arbuthnot$ratio)  # 1.070748
# one-sample t.test
t.test(present$ratio, mu = 1, alternative = "greater")
t.test(arbuthnot$ratio, mu = mean(present$ratio), alternative = "greater")
# conclusion
# Arbuthnot's observation about boys being born in greater proportion than girls still hold true in the US. It's demonstrated by a one-sample t-test with 95% confidence interval and p-value < 2.2e-1. However, when comparing the ratio between Arbuthnot's observation with present observation, a one-sample t-test revealed that the Arbuthnot's ratio is statistically significantly greater. In other words, the boys-to-girls ratio is still larger than 1 (indicating more boys than girls); however, the ratio is getting smaller and not as big as Arbuthnot's.
library(dplyr)
present <- present %>%
mutate(babies = boys + girls) %>%
arrange(-babies) %>%
print(head)
library(dplyr)
present <- present %>%
mutate(babies = boys + girls) %>%
arrange(-babies) %>%
select(year, babies) %>%
print(head)
library(dplyr)
present <- present %>%
mutate(babies = boys + girls) %>%
arrange(-babies) %>%
select(year, babies) %>%
print
source("more/present.R")
library(dplyr)
present <- present %>%
mutate(babies = boys + girls) %>%
arrange(-babies) %>%
select(year, babies) %>%
print
# the answer is 1961 - we see 4268326 babies born in that year
