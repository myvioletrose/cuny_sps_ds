dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
geom_point() +
geom_smooth(method = "lm", col = "red", se = T) +
facet_wrap(~release_month) +
ggtitle("Release Month") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
# wg.log vs pb.log  by release_decade
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
geom_point() +
geom_smooth(method = "lm", col = "orange", se = T) +
facet_wrap(~release_decade) +
ggtitle("Release Period") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
###############################################################
#################### regression model #########################
###############################################################
###############################
# split the data, train + test
set.seed(1234)
dfCompleteFlag <- dfComplete %>%
dplyr::filter(worldwide_flag == 1)
partition <- sample(x = nrow(dfCompleteFlag),
size = nrow(dfCompleteFlag) * 0.7)
train <- dfCompleteFlag[partition, ]
test <- dfCompleteFlag[-partition, ]
###################
# build full model
# build interaction between log(production_budget) with everything else
library(broom)
fullModel <- lm(wg.log ~ pb.log * (mpaa_rating + genre + release_month + release_decade),
data = train)
broom::tidy(fullModel) %>%
dplyr::filter(p.value < .05) %>%
dplyr::arrange(p.value)
# try backward stepwise regression
# calculate AIC
library(MASS)
backwardModel <- MASS::stepAIC(fullModel, direction = "backward")
summary(backwardModel)
########################
# (1) linearity, (2) nearly normal residuals, (3) homoscedasticity
# linear scatter plot (checked already from above EDA)
# a strong positive correlation between production budget and worldwide gross
# however, there are patterns hidden underneath the two variables
# for examples,
# PG, PG-13 generate the most revenue
# Action, Adventure draw the biggest box office, but
# Horror is the most profitable movie genre
# summer (May, June & July) is always the best time to roll out blockbuster movies!
# therefore, we are building interaction between log(production_budget) with everything else
par(mfrow = c(1, 3))
# hist of residuals
hist(backwardModel$residuals, main = "Histogram of residuals")
# qqplot
qqnorm(backwardModel$residuals, main = "QQplot")
qqline(backwardModel$residuals)
# residual plot
plot(backwardModel$residuals ~ train$pb.log, main = "Residual chart")
par(mfrow = c(1, 1))
######################
# prediction accuracy
# apply model to test data set
testModel <- predict(backwardModel, test)
# convert back to original value
testModel <- exp(testModel)
test$predicted <- testModel
# visualize the prediction
plot(test$predicted ~ test$worldwide_gross,
main = "Prediction Model of Box Office Revenue\n -- dashline is only a reference line for perfect correlation",
xlab = "actual",
ylab = "predicted")
abline(a = 0, b = 1, col = "red", lty = 2)
# calculate RMSE (Root Mean Square Error)
library(Metrics)
rmse(actual = test$worldwide_gross, predicted = test$predicted)
####################
##### comments #####
####################
# residuals heavily skewed to the left from the histogram
# qqplot does not support normality of the residuals either
# test for homoscedasticity also failed, i.e. car::ncvTest(AIC_Model)
# the final plot (actual vs. predicted) shows majority of the movies are underpredicted!
# the RMSE - it is interpreted as how far on an average, the residuals are from zero
# It nullifies squared effect of MSE and provides the result in original units as data
# Let's try to minimize it!
#######################################################################
#################### rebuild regression model #########################
#######################################################################
##########################
# let's rebuild the model
# by first removing all the outliners from the lower end of the sprectum
# recall from above EDA,
gridExtra::grid.arrange(box.wg, box.pb, ncol = 2)
# dplyr::filter outliners
wg.log.out <- boxplot(dfCompleteFlag$wg.log)$out
pb.log.out <- boxplot(dfCompleteFlag$pb.log)$out
dfCompleteFlag2 <- dfCompleteFlag %>%
dplyr::filter(!(wg.log %in% wg.log.out) & !(pb.log %in% pb.log.out))
dim(dfCompleteFlag2)
#####################################
# split the data, train + test again
set.seed(1234)
partition2 <- sample(x = nrow(dfCompleteFlag2),
size = nrow(dfCompleteFlag2) * 0.7)
train2 <- dfCompleteFlag2[partition2, ]
test2 <- dfCompleteFlag2[-partition2, ]
#########################
# build full model again
# build interaction between log(production_budget) with everything else
library(broom)
fullModel2 <- lm(wg.log ~ pb.log * (mpaa_rating + genre + release_month + release_decade),
data = train2)
broom::tidy(fullModel2) %>%
dplyr::filter(p.value < .05) %>%
dplyr::arrange(p.value)
# try backward stepwise regression
# calculate AIC
library(MASS)
backwardModel2 <- MASS::stepAIC(fullModel2, direction = "backward")
summary(backwardModel2)
########################################
# regression diagnostic - check again!!
# (1) linearity, (2) nearly normal residuals, (3) homoscedasticity
# linear scatter plot (checked already)
par(mfrow = c(1, 3))
# hist of residuals
hist(backwardModel2$residuals, main = "Histogram of residuals (ver 2)")
# qqplot
qqnorm(backwardModel2$residuals, main = "QQplot (ver 2)")
qqline(backwardModel2$residuals)
# residual plot
plot(backwardModel2$residuals ~ train2$pb.log, main = "Residual chart (ver 2)")
par(mfrow = c(1, 1))
######################
# prediction accuracy
# apply model to test data set
testModel2 <- predict(backwardModel2, test2)
# convert back to original value
testModel2 <- exp(testModel2)
test2$predicted <- testModel2
# visualize the prediction
plot(test2$predicted ~ test2$worldwide_gross,
main = "Prediction Model of Box Office Revenue (ver 2)\n -- dashline is only a reference line for perfect correlation",
xlab = "actual",
ylab = "predicted")
abline(a = 0, b = 1, col = "red", lty = 2)
# calculate RMSE (Root Mean Square Error)
library(Metrics)
rmse(actual = test2$worldwide_gross, predicted = test2$predicted)
summary(backwardModel2)
broom::tidy(backwardModel2) %>%
dplyr::filter(p.value < .05) %>%
dplyr::arrange(p.value)
ls()
# load("Ng-Project.rda")
save(list = ls(), file = "Ng-Project.rda")
summary(backwardModel2)
rm(list = ls())
# load packages
library(plyr)
library(lubridate)
library(tidyverse)
# load file from github
# source from tidytuesday - they have a new dataset coming out every Tuesday
github <- "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data"
date <- "2018-10-23"
csv <- "movie_profit.csv"
myfile <- paste(github, date, csv, sep = "/")
df <- readr::read_csv(myfile)
###################
### have a look ###
###################
head(df)
dim(df)  # [1] 3401    9
str(df)
############
# clean-up #
############
# check duplication: is there any movie that's duplicated in this data set?
plyr::count(df, "movie") %>%
dplyr::filter(freq >1)
# what is this movie?
df %>%
dplyr::filter(movie == "Tau ming chong") %>%
print
# id == 2974, 2975
# let's remove either one of these identical rows
df <- df %>%
dplyr::filter(X1 != 2974)
# is there any movie that has 0 or even negative domestic/worldwide gross?
df %>%
dplyr::filter(domestic_gross <=0 | worldwide_gross <= 0)
# there are 66 of these in this data set (as of Nov 7)
# some of them have not been released yet, like the Aquaman!
# let's not remove them but create a flag for each of these variables
df$domestic_flag <- ifelse(df$domestic_gross <=0, 0, 1); sum(df$domestic_flag)
df$worldwide_flag <- ifelse(df$worldwide_gross <=0, 0, 1); sum(df$worldwide_flag)
# let's rename the X1 column and rename it as a movie id column
names(df)[1] <- "movie_id"
# change "date": turn the release_date column as date data type; add release day, month, year
df <- df %>%
mutate(release_date = lubridate::mdy(release_date),
release_day = lubridate::wday(release_date,
week_start = getOption("lubridate.week.start", 1)),
release_month = lubridate::month(release_date),
release_year = lubridate::year(release_date))
# rescale the production_budget, domestic_gross & worldwide_gross (by dividing 1 million)
# so that they are easier to read and/or visualize
df <- df %>%
mutate(production_budget = production_budget / 1000000,
domestic_gross = domestic_gross / 1000000,
worldwide_gross = worldwide_gross / 1000000)
# change mpaa_rating & genre data type from character to factor
df <- df %>%
mutate(mpaa_rating = factor(mpaa_rating,
levels = c("G", "PG", "PG-13", "R")),
genre = as.factor(genre))
# complete.cases - remove all NA's
dfComplete <- df[complete.cases(df), ]
# let's look at the clean data set
head(dfComplete)
dim(dfComplete)  # [1] 3230   14
str(dfComplete)
library(plyr)
variable <- lapply(dfComplete, class) %>%
plyr::ldply(., data.frame)
variable
################################################
# we are interested in the following variables,
# dependent/predicted variable: worldwide_gross
# independent/predicting variables: production_budget, mpaa_rating, genre, release_month, release_year
###################################################
# let's first look at profit and production_budget
# profit
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
dplyr::select(worldwide_gross) %>%
summary
# production_budget
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
dplyr::select(production_budget) %>%
summary
#################################################################################
# there are many outliners in both profit and production_budget (not surprising)
# let's do "log" transformation for both variables
dfComplete <- dfComplete %>%
mutate(wg.log = log(worldwide_gross),
pb.log = log(production_budget))
###########################################
# take a look of them after transformation
library(gridExtra)
## worldwide_gross ##
box.wg <- dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(y = wg.log)) +
geom_boxplot() +
ggtitle("log(Worldwide Gross)") +
theme_bw() +
labs(x = "", y = "")
hist.wg <- dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = wg.log, stat(density))) +
geom_histogram() +
ggtitle("log(Worldwide Gross)") +
theme_bw() +
labs(x = "", y = "")
## production_budget ##
box.pb <- dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(y = pb.log)) +
geom_boxplot() +
ggtitle("log(Production Budget)") +
theme_bw() +
labs(x = "", y = "")
hist.pb <- dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, stat(density))) +
geom_histogram() +
ggtitle("log(Production Budget)") +
theme_bw() +
labs(x = "", y = "")
gridExtra::grid.arrange(box.wg,
hist.wg,
box.pb,
hist.pb,
ncol = 2)
##########################################
# let's look at the categorical variables
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
dplyr::select(mpaa_rating, genre, release_month, release_year) %>%
lapply(., ftable)
# we already transformed mpaa_rating and genre from character to factor
# now let's do the same for release_month and release_year, and let's call it release_decade
dfComplete <- dfComplete %>%
mutate(release_month = as.factor(release_month),
release_decade =
if_else(release_year < 1980, "1970s or earlier",
if_else(release_year >= 1980 & release_year < 1990, "1980s",
if_else(release_year >= 1990 & release_year < 2000, "1990s",
if_else(release_year >= 2000 & release_year < 2010, "2000s",
if_else(release_year >= 2010, "2010s", "n/a"))))),
release_decade = as.factor(release_decade))
# let's look at these categorical variables again
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
dplyr::select(mpaa_rating, genre, release_month, release_decade) %>%
lapply(., ftable)
#################################################################
# let's visualize the data - worldwide_gross ~ production_budget
# let's focus more on wg.log (y-axis) vs pb.log (x-axis) by different categorical variables
# wg.log vs pb.log
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
geom_point() +
geom_smooth(method = "lm", col = "grey", se = T) +
ggtitle("log(Worldwide Gross) by log(Production Budget)") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
# wg.log vs pb.log by mpaa_rating
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
# ggplot(data = ., aes(x = production_budget, y = worldwide_gross)) +
geom_point() +
geom_smooth(method = "lm", col = "blue", se = T) +
facet_wrap(~mpaa_rating) +
ggtitle("MPAA Rating") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
# wg.log vs pb.log by genre
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
geom_point() +
geom_smooth(method = "lm", col = "green", se = T) +
facet_wrap(~genre) +
ggtitle("Genre") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
# wg.log vs pb.log by release_month
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
geom_point() +
geom_smooth(method = "lm", col = "red", se = T) +
facet_wrap(~release_month) +
ggtitle("Release Month") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
# wg.log vs pb.log  by release_decade
dfComplete %>%
dplyr::filter(worldwide_flag == 1) %>%
ggplot(data = ., aes(x = pb.log, y = wg.log)) +
geom_point() +
geom_smooth(method = "lm", col = "orange", se = T) +
facet_wrap(~release_decade) +
ggtitle("Release Period") +
labs(x = "log(Production Budget)", y = "log(Worldwide Gross)") +
theme_bw()
###############################################################
#################### regression model #########################
###############################################################
###############################
# split the data, train + test
set.seed(1234)
dfCompleteFlag <- dfComplete %>%
dplyr::filter(worldwide_flag == 1)
partition <- sample(x = nrow(dfCompleteFlag),
size = nrow(dfCompleteFlag) * 0.7)
train <- dfCompleteFlag[partition, ]
test <- dfCompleteFlag[-partition, ]
###################
# build full model
# build interaction between log(production_budget) with everything else
library(broom)
fullModel <- lm(wg.log ~ pb.log * (mpaa_rating + genre + release_month + release_decade),
data = train)
broom::tidy(fullModel) %>%
dplyr::filter(p.value < .05) %>%
dplyr::arrange(p.value)
# try backward stepwise regression
# calculate AIC
library(MASS)
backwardModel <- MASS::stepAIC(fullModel, direction = "backward")
summary(backwardModel)
########################
# (1) linearity, (2) nearly normal residuals, (3) homoscedasticity
# linear scatter plot (checked already from above EDA)
# a strong positive correlation between production budget and worldwide gross
# however, there are patterns hidden underneath the two variables
# for examples,
# PG, PG-13 generate the most revenue
# Action, Adventure draw the biggest box office, but
# Horror is the most profitable movie genre
# summer (May, June & July) is always the best time to roll out blockbuster movies!
# therefore, we are building interaction between log(production_budget) with everything else
par(mfrow = c(1, 3))
# hist of residuals
hist(backwardModel$residuals, main = "Histogram of residuals")
# qqplot
qqnorm(backwardModel$residuals, main = "QQplot")
qqline(backwardModel$residuals)
# residual plot
plot(backwardModel$residuals ~ train$pb.log, main = "Residual chart")
par(mfrow = c(1, 1))
######################
# prediction accuracy
# apply model to test data set
testModel <- predict(backwardModel, test)
# convert back to original value
testModel <- exp(testModel)
test$predicted <- testModel
# visualize the prediction
plot(test$predicted ~ test$worldwide_gross,
main = "Prediction Model of Box Office Revenue\n -- dashline is only a reference line for perfect correlation",
xlab = "actual (in USD millions)",
ylab = "predicted (in USD millions)")
abline(a = 0, b = 1, col = "red", lty = 2)
# calculate RMSE (Root Mean Square Error)
library(Metrics)
rmse(actual = test$worldwide_gross, predicted = test$predicted)
####################
##### comments #####
####################
# residuals heavily skewed to the left from the histogram
# qqplot does not support normality of the residuals either
# the final plot (actual vs. predicted) shows majority of the movies are underestimated!
# the RMSE - it is interpreted as how far on an average, the residuals are from zero
# It nullifies squared effect of MSE and provides the result in original units as data
# Let's try to minimize it!
#######################################################################
#################### rebuild regression model #########################
#######################################################################
##########################
# let's rebuild the model
# by first removing all the outliners from the lower end of the sprectum
# recall from above EDA,
gridExtra::grid.arrange(box.wg, box.pb, ncol = 2)
# dplyr::filter outliners
wg.log.out <- boxplot(dfCompleteFlag$wg.log)$out
pb.log.out <- boxplot(dfCompleteFlag$pb.log)$out
dfCompleteFlag2 <- dfCompleteFlag %>%
dplyr::filter(!(wg.log %in% wg.log.out) & !(pb.log %in% pb.log.out))
dim(dfCompleteFlag2)
#####################################
# split the data, train + test again
set.seed(1234)
partition2 <- sample(x = nrow(dfCompleteFlag2),
size = nrow(dfCompleteFlag2) * 0.7)
train2 <- dfCompleteFlag2[partition2, ]
test2 <- dfCompleteFlag2[-partition2, ]
#########################
# build full model again
# build interaction between log(production_budget) with everything else
library(broom)
fullModel2 <- lm(wg.log ~ pb.log * (mpaa_rating + genre + release_month + release_decade),
data = train2)
broom::tidy(fullModel2) %>%
dplyr::filter(p.value < .05) %>%
dplyr::arrange(p.value)
# try backward stepwise regression
# calculate AIC
library(MASS)
backwardModel2 <- MASS::stepAIC(fullModel2, direction = "backward")
summary(backwardModel2)
########################################
# regression diagnostic - check again!!
# (1) linearity, (2) nearly normal residuals, (3) homoscedasticity
# linear scatter plot (checked already)
par(mfrow = c(1, 3))
# hist of residuals
hist(backwardModel2$residuals, main = "Histogram of residuals (ver 2)")
# qqplot
qqnorm(backwardModel2$residuals, main = "QQplot (ver 2)")
qqline(backwardModel2$residuals)
# residual plot
plot(backwardModel2$residuals ~ train2$pb.log, main = "Residual chart (ver 2)")
par(mfrow = c(1, 1))
######################
# prediction accuracy
# apply model to test data set
testModel2 <- predict(backwardModel2, test2)
# convert back to original value
testModel2 <- exp(testModel2)
test2$predicted <- testModel2
# visualize the prediction
plot(test2$predicted ~ test2$worldwide_gross,
main = "Prediction Model of Box Office Revenue (ver 2)\n -- dashline is only a reference line for perfect correlation",
xlab = "actual (in USD millions)",
ylab = "predicted (in USD millions)")
abline(a = 0, b = 1, col = "red", lty = 2)
# calculate RMSE (Root Mean Square Error)
library(Metrics)
rmse(actual = test2$worldwide_gross, predicted = test2$predicted)
summary(backwardModel2)
broom::tidy(backwardModel2) %>%
dplyr::filter(p.value < .05) %>%
dplyr::arrange(p.value)
# load("Ng-Project.rda")
save(list = ls(), file = "Ng-Project.rda")
# load("Ng-Project.rda")
save(list = ls(), file = "Ng-Project.rda")
q()
