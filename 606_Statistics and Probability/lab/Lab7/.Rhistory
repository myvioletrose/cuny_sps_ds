install.packages("dplyr")
library(dplyr)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("yaml", dependencies = T)
library(dplyr)
install.packages("purrr")
library(purrr)
library(dplyr)
ls(pos = "package:dplyr")
library(dplyr)
library(DATA606)
install.packages("later")
library(DATA606)
library(Rcpp)
library(DATA606)
install.packages("later")
install.packages("later", dependencies = T)
install.packages("later", dependencies = T, TRUE)
install.packages("installr") # install
install.packages("installr") # install
installr::updateR(T) # updating R.
quit()
install.packages(c("bigrquery", "mailR"))
library(c("bigrquery", "mailR"))
library(bigrquery)
library(mailR)
## load packages
if(!require(bigrquery)){install.packages("bigrquery"); require(bigrquery)}
if(!require(rmarkdown)){install.packages("rmarkdown"); require(rmarkdown)}
if(!require(knitr)){install.packages("knitr"); require(knitr)}
if(!require(mailR)){install.packages("mailR"); require(mailR)}
if(!require(lubridate)){install.packages("lubridate"); require(lubridate)}
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
if(!require(ggplot2)){install.packages("ggplot2"); require(ggplot2)}
if(!require(stringr)){install.packages("stringr"); require(stringr)}
if(!require(purrr)){install.packages("purrr"); require(purrr)}
if(!require(rlang)){install.packages("rlang"); require(rlang)}
# Big Query arguments
projectId <- "media-data-science"
dataset_staging <- "Jim_Story_Staging"
dataset_production <- "Jim_Story_Production"
dataset_audit <- "Jim_Story_Audit"
check_audit_a_query <- "
select max_date as last_entry_time
, sys_run_time as last_run_sys_time
, DATE_ADD(CURRENT_DATE(), 0, 'DAY') as current_run_time
, flag
from [media-data-science:Jim_Story_Audit.audit_a]
where job_number = (select max(job_number) from [media-data-science:Jim_Story_Audit.audit_a] where flag = 1)
"
# write query and save result
audit_a_maxdate <- query_exec(query = check_audit_a_query,
project = projectId,
use_legacy_sql = T)
# Big Query arguments
projectId <- "media-data-science"
dataset_staging <- "Jim_Story_Staging"
dataset_production <- "Jim_Story_Production"
dataset_audit <- "Jim_Story_Audit"
check_audit_a_query <- "
select max_date as last_entry_time
, sys_run_time as last_run_sys_time
, DATE_ADD(CURRENT_DATE(), 0, 'DAY') as current_run_time
, flag
from [media-data-science:Jim_Story_Audit.audit_a]
where job_number = (select max(job_number) from [media-data-science:Jim_Story_Audit.audit_a] where flag = 1)
"
# write query and save result
audit_a_maxdate <- query_exec(query = check_audit_a_query,
project = projectId,
use_legacy_sql = T)
ls(pos = "package:bigrquery")
red_flag2 <- query_exec(query = "select flag from [media-data-science:Jim_Story_Audit.audit_a]
where job_number = (select max(job_number) from [media-data-science:Jim_Story_Audit.audit_a])",
project = projectId,
use_legacy_sql = T) %>%
as.integer
set_access_cred(NULL)
get_access_cred()
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/lab/Lab7")
plot(m1$residuals ~ mlb11$at_bats)
load("more/mlb11.RData")
# I would use a scatter plot to display the relationship between "runs" and one of the other numerical variables
# the relationship looks linear, and I would be comfortable to use it to predict the number of runs
# the cor.test displays a statistically significant positive correlation between the two variables
plot(runs ~ at_bats, data = mlb11)
cor.test(mlb11$runs, mlb11$at_bats)
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
lm(runs ~ homeruns, data = mlb11)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
head(mlb11)
# I would use a scatter plot to display the relationship between "runs" and one of the other numerical variables
# the relationship looks linear, and I would be comfortable to use it to predict the number of runs
# the cor.test displays a statistically significant positive correlation between the two variables
plot(runs ~ stolen_bases, data = mlb11)
cor.test(mlb11$runs, mlb11$stolen_bases)
# I would use a scatter plot to display the relationship between "runs" and one of the other numerical variables
# the relationship looks linear, and I would be comfortable to use it to predict the number of runs
# the cor.test displays a statistically significant positive correlation between the two variables
plot(runs ~ hits, data = mlb11)
cor.test(mlb11$runs, mlb11$stolen_bases)
# I would use a scatter plot to display the relationship between "runs" and one of the other numerical variables
# the relationship looks linear, and I would be comfortable to use it to predict the number of runs
# the cor.test displays a statistically significant positive correlation between the two variables
plot(runs ~ hits, data = mlb11)
cor.test(mlb11$runs, mlb11$hits)
# I would use a scatter plot to display the relationship between "runs" and one of the other numerical variables
# the relationship looks linear, and I would be comfortable to use it to predict the number of runs
# the cor.test displays a statistically significant positive correlation between the two variables
plot(runs ~ hits, data = mlb11)
hits.lm <- lm(runs ~ hits, data = mlb11)
abline(hits.lm)
cor.test(mlb11$runs, mlb11$hits)
# I would use a scatter plot to display the relationship between "runs" and one of the other numerical variables
cor.test(mlb11$runs, mlb11$at_bats)
cor.test(mlb11$runs, mlb11$hits)
0.8012108^2
0.610627^2
# Using a cor.test() function to find the correlation between each of these variables with runs and we see that hits has a higher r value than at_bats, i.e. (0.8012108 > 0.610627). In terms of R-square, hits can account for 64% of the variance in runs, whereas at_bats is 37%.
cor.test(mlb11$runs, mlb11$at_bats)
cor.test(mlb11$runs, mlb11$hits)
head(mlb11)
attach(mlb11)
names(mlb11)
map2(runs, var = list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins), .f = cor)
library(purrr)
ls(pos = "package:purrr")
map2(runs, var = list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins), .f = cor)
map2(runs, var = list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins), .f = cor(x, y))
map2(runs, var = c(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins),
function(x, y) {x, y})
map2(runs, var = c(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins),
function(x, y) cor(x, y))
cor(runs, at_bats)
lapply(c(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins), function(x) cor(runs, x))
lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins), function(x) cor(runs, x))
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins),
function(x) cor(runs, x))
names(corList) <- c(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins)
print(corList)
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins")
print(corList)
unlist(corList)
unlist(corList) %>% as.data.frame
unlist(corList) %>% as.data.frame %>% arrange(. desc)
unlist(corList) %>% as.data.frame %>% arrange("." desc)
unlist(corList) %>% as.data.frame %>% arrange
library(dplyr)
unlist(corList) %>% as.data.frame %>% arrange(. desc)
unlist(corList) %>% as.data.frame %>% arrange(\\. desc)
unlist(corList) %>% as.data.frame
unlist(corList) %>% as.data.frame %>% arrange
unlist(corList) %>% as.data.frame %>% arrange(".", desc)
unlist(corList) %>% as.data.frame %>% arrange(`.`` desc)
unlist(corList) %>% as.data.frame %>% arrange(`.` desc)
unlist(corList) %>% as.data.frame %>% arrange(`\.` desc)
unlist(corList) %>% as.data.frame %>% arrange("\." desc)
unlist(corList) %>% as.data.frame
unlist(corList) %>% as.data.frame %>% rename("r" = .)
?rename
unlist(corList) %>% as.data.frame %>% rename(coefficient = .)
unlist(corList) %>% as.data.frame %>% rename(., coefficient = .)
unlist(corList) %>% as.data.frame %>% rename(., coefficient = .) %>% arrange(abs(coefficient) desc)
unlist(corList) %>% as.data.frame %>% rename(., coefficient = .) %>% arrange(abs(coefficient) desc)
unlist(corList) %>% as.data.frame %>% rename(., coefficient = .)
?arrange
unlist(corList) %>% as.data.frame %>% rename(., coefficient = .) %>% arrange(desc(abs(coefficient))
unlist(corList) %>% as.data.frame %>% rename(., coefficient = .) %>% arrange(desc(abs(coefficient)))
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(var = row.names) %>%
arrange(desc(abs(coefficient)))
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
windows()
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
plot(runs ~ bat_avg, data = mlb11)
hits.ba <- lm(runs ~ bat_avg, data = mlb11)
abline(hits.ba)
cor.test(runs, bat_avg)
detach(mlb11)
plot(runs ~ bat_avg, data = mlb11, main = "relation between runs and batting average")
cor.test(runs, bat_avg)
abline(hits.ba)
abline(hits.ba, col = "red", lty = 2)
# bat_avg has the strongest correlation among the traditional variables, see below
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
plot(runs ~ bat_avg, data = mlb11, main = "relation between runs and batting average")
hits.ba <- lm(runs ~ bat_avg, data = mlb11)
abline(hits.ba, col = "red", lty = 2)
cor.test(runs, bat_avg)
detach(mlb11)
# bat_avg (followed by hits) has the strongest correlation paired with runs among the traditional variables, see below
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
plot(runs ~ bat_avg, data = mlb11, main = "relation between runs and batting average")
hits.ba <- lm(runs ~ bat_avg, data = mlb11)
abline(hits.ba, col = "red", lty = 2)
cor.test(runs, bat_avg)
detach(mlb11)
names(mlb11)
head(mlb11)
# plot them all
df <- mlb11
library(ggplot2)
df <- mlb11 %>%
select(-team)
df
df <- mlb11 %>%
select(-team) %>%
gather(-runs)
# plot them all
library(tidyr)
df <- mlb11 %>%
select(-team) %>%
gather(-runs)
head(df)
View(df)
df <- mlb11 %>%
select(-team) %>%
gather(-runs) %>%
rename(., variable = -runs)
?gather
df <- mlb11 %>%
select(-team) %>%
gather(key, value, -runs)
View(df)
df <- mlb11 %>%
select(-team) %>%
gather(variables, value, -runs)
head(df)
df <- mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value)
head(df)
windows()
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) %>%
geom_point(col = ) +
geom_smooth(method = "lm") %>%
facet_wrap(~variables)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) %>%
geom_point() +
geom_smooth(method = "lm") %>%
facet_wrap(~variables)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~variables)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~variables, scales = "free")
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~variables, scales = "free", nrow = 2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme(legend = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme(legend.position = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
# yes these new variables are more successful (or more predictive than traditional ones)
# the best (or most predictive) variable is ""
library(dplyr)
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins,
new_onbase, new_slug, new_obs),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins",
"new_onbase", "new_slug", "new_obs")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
# plot them all
library(tidyr)
library(ggplot2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme(legend.position = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
detach(mlb11)
# yes these new variables are more successful (or more predictive than traditional ones)
# the best (or most predictive) variable is ""
library(dplyr)
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins,
new_onbase, new_slug, new_obs),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins",
"new_onbase", "new_slug", "new_obs")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
# plot them all
library(tidyr)
library(ggplot2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme(legend.position = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
detach(mlb11)
0.96691630^2
# yes these new variables are more successful (or more predictive than traditional ones)
# the best (or most predictive) variable is "new_obs"
# the correlation coefficient is 0.96691630, accounting for 93% of the variance in "runs"
library(dplyr)
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins,
new_onbase, new_slug, new_obs),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins",
"new_onbase", "new_slug", "new_obs")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
# plot them all
library(tidyr)
library(ggplot2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme(legend.position = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
detach(mlb11)
# yes these new variables are more successful (or more predictive than traditional ones)
# the best (or most predictive) variable is "new_obs"
# the correlation coefficient is 0.96691630, accounting for 93% of the variance in "runs"
library(dplyr)
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins,
new_onbase, new_slug, new_obs),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins",
"new_onbase", "new_slug", "new_obs")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
# plot them all
library(tidyr)
library(ggplot2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic() +
theme(legend.position = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
detach(mlb11)
# yes these new variables are more successful (or more predictive than traditional ones)
# the best (or most predictive) variable is "new_obs"
# the correlation coefficient is 0.96691630, accounting for 93% of the variance in "runs"
library(dplyr)
attach(mlb11)
corList <- lapply(list(at_bats, hits, homeruns, bat_avg, strikeouts, stolen_bases, wins,
new_onbase, new_slug, new_obs),
function(x) cor(runs, x))
names(corList) <- c("at_bats", "hits", "homeruns", "bat_avg", "strikeouts", "stolen_bases", "wins",
"new_onbase", "new_slug", "new_obs")
unlist(corList) %>%
as.data.frame %>%
rename(., coefficient = .) %>%
mutate(variable = row.names(.)) %>%
arrange(desc(abs(coefficient)))
# plot them all
library(tidyr)
library(ggplot2)
mlb11 %>%
select(-team) %>%
gather(variables, value, -runs) %>%
select(variables, runs, value) %>%
ggplot(., aes(x = value, y = runs, fill = variables)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(~variables, scales = "free", nrow = 2)
detach(mlb11)
windows()
par(mfrow = c(1, 3))
lm.new_obs <- lm(runs ~ new_obs, data = mlb11)
plot(lm.new_obs$residuals ~ mlb11$new_obs)
abline(h = 0, lty = 3)
hist(lm.new_obs$residuals)
qqnorm(lm.new_obs$residuals)
qqline(lm.new_obs$residuals)
par(mfrow = c(1, 3))
lm.new_obs <- lm(runs ~ new_obs, data = mlb11)
plot(lm.new_obs$residuals ~ mlb11$new_obs, main = "residual plot")
abline(h = 0, lty = 3)
hist(lm.new_obs$residuals)
qqnorm(lm.new_obs$residuals)
qqline(lm.new_obs$residuals)
# Yes, everything checks out!
par(mfrow = c(1, 3))
lm.new_obs <- lm(runs ~ new_obs, data = mlb11)
plot(lm.new_obs$residuals ~ mlb11$new_obs, main = "residual plot")
abline(h = 0, lty = 3)
hist(lm.new_obs$residuals)
qqnorm(lm.new_obs$residuals)
qqline(lm.new_obs$residuals)
# Yes, everything checks out!
par(mfrow = c(1, 3))
lm.new_obs <- lm(runs ~ new_obs, data = mlb11)
plot(lm.new_obs$residuals ~ mlb11$new_obs, main = "residual plot")
abline(h = 0, lty = 3)
hist(lm.new_obs$residuals, main = "histogram of residuals")
qqnorm(lm.new_obs$residuals)
qqline(lm.new_obs$residuals)
