word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check(" apple", "applE ")
word_check("ORANGE", "applE")
A <- matrix(c(4, -4, 5, 6, -1, 0, -2, 2, -3),
3,
3,
byrow = TRUE)
A
b <- c(-34, -6, 19)
install.packages(matlib)
install.packages("matlib")
?showEqn
?showeqn
ls(pos = "package:matlib")
library(matlib)
ls(pos = "package:matlib")
?showEqn
matlib::showEqn(A, b)
solve(A, b)
solve(A) %*% b
A
if(!require(matlib)){install.packages("matlib"); require(matlib)}
solve(A, b)
palindrome_check("Level ")
st = 'Create a list of the first letters of every word in this string'
ls()
library(stringr)
?str_split
str_split(st, " ")
str_split(st, " ") %>%
class
str_split(st, " ") %>%
map(., function(x) x[1])
str_split(st, " ") %>%
map(., function(x) {x[1]})
str_split(st, " ") %>%
map(., function(x) {x[[1]})
ls(pos = "package:stringr")
df <- str_split(st, " ")
df
df[1][1]
df[1][2]
df[[1]][1]
map(df, function(x) {print(x)[1]})
library(purrr)
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[[1]]})
df
df
map(df, function(x) {print(x)[1][[1]]})
map(df, function(x) {print(x)[1][1]})
df[1]
df[1][1]
df[1][1][1]
df %>% unlist
str_split("Create", "")
length(df[[1]])
unlist(df)
unlist(df) %>% length
unlist(df)[1]
str_split(unlist(df)[1])
str_split(unlist(df)[1], "")
str_split(unlist(df)[1], "")[1]
str_split(unlist(df)[1], "")[[1]]
str_split(unlist(df)[1], "")[[1]][1]
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
lapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
library(purrr)
ls(pos = "package:purrr")
m <- c(1, 2, 3, -4)
reduce(m, *)
reduce(m, "*")
accumulate(m, "*")
accumulate(m, "+")
m <- c(1, 2, 3, -4)
m
?accumulate
accumulate(m, `+`)
reduce(m, `*`)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
library(stringr)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(s == s[length(s):1])
}
palindrome('helleh')
palindrome('helleh!')
map(c('helleh', 'nurses run'), palindrom)
map(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh!', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
s <- 'I am Batman'
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s
s %in% letters
letters %in% s
all(letters %in% s)
ispangram <- function(s){
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(letters %in% s)
}
ispangram("The quick brown fox jumps over the lazy dog")
remove.packages("httpuv")
.libPaths()
devtools::install_github("jbryer/DATA606")
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
length(df$value)
df
df$odds[2]
df$value[1]
for (i in 1:length(df$value)){
print( paste0("Financial Advisors are ", round(df$odds[i], 2), " more likely to be interested in ", df$value[i]) )
}
library(broom)
ls(pos = "package:broom")
?inflate
data("mtcars")
head(mtcars)
boxplot(mpg)
boxplot(mpg, data = mtcars)
boxplot(mtcars$mpg, data = mtcars)
attach(mtcars)
sapply(mtcars, unique)
?crossing
library(broom)
?crossing
boxplot(mtcars$mpg, data = mtcars)
IQR(mpg)
boxplot(mtcars$mpg ~ vs, data = mtcars)
IQR(mpg ~ vs)
sapply(c(mpg, wt), IQR)
sapply(mtcars[, c(mpg, wt)], IQR)
mtcars[, c(mpg, wt)]
mtcars[, c("mpg", "wt")]
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars[, c("mpg", "wt")], IQR)
par(mar = c(1, 2))
par(mfrow = c(1, 2))
boxplot(mpg, col = 'red')
boxplot(wt, col = 'blue')
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars, unique)
sapply(mtcars, length(unique))
sapply(mtcars, function(x) length(unique(x)))
crossing(cyl, vs)
broom::crossing(cyl, vs)
search()
?crossing
library(tidyr)
tidyr::crossing(cyl, vs)
expand.grid(cyl, vs)
dim(mtcars)
df <- expand.grid(cyl, vs)
dim(df)
head9df
head(df)
sapply(df, unique)
df$combo <- paste(df$var1, df$Var2)
head(df)
df$combo <- paste(df$Var1, df$Var2)
head(df)
sapply(df, unique)
table(df$combo)
df$combo <- paste(df$Var1, df$Var2, sep = "-")
table(df$combo)
table(cyl, vs)
sapply(mtcars, function(x) length(unique(x)))
tidyr::crossing(cyl, vs)
?crossing
?plot
library(DATA606)
shiny_demo('DualScales', package = 'DATA606')
library(rlang)
library(ggplot2)
library(ggplot2)
shiny_demo('DualScales', package = 'DATA606')
install.packages('widyr')
library(widyr)
?pairwise_similarity
?inner_join
data(breslow.dat, package = "robust")
install.packages("robust"); library(robust)
data(breslow.dat, package = "robust")
attach(brewslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = brewslow.dat, family = poisson())
summary(fit)
attach(brewslow.dat)
data(breslow.dat, package = "robust")
ls()
head(breslow.dat)
attach(breslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
fit <- glm(sumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
?predict
?base::predict
summary(breslow.dat)
summary(breslow.dat)
head(breslow.dat)
ob <- data.frame(Base = c(22, 41), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
exp(coef(fit))
1.023 ^ 10
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "placebo"))
predict(fit, ob)
1.0229102 ^ 20 + 1.0230007 ^ 40 + 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1 / 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) + (1.0230007 ^ 40) + 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
exp(coef(fit))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
exp(0.8583864)
coef(fit)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
exp(1.94882593) * exp(0.02265174 ^ 20) * exp(0.02274013 ^ 40) * exp(-0.15270095)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 30), Trt = c("placebo", "progabide"))
exp(predict(fit, ob))
(21.84 - 18.75) / 21.84
library(tidyverse)
library(Rcpp)
library(dplyr)
update.packages()
library(DATA606)
library(tidyverse)
update.packages()
quit
quit()
library(tidyverse)
remove.packages("Rcpp")
install.packages("Rcpp")
library(tidyverse)
library(DATA606)
install.packages("digest")
library(DATA606)
library(dplyr)
remove.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("yaml", dependencies = T)
library(dplyr)
install.packages("purrr")
library(purrr)
library(dplyr)
ls(pos = "package:dplyr")
library(dplyr)
library(DATA606)
install.packages("later")
library(DATA606)
library(Rcpp)
library(DATA606)
install.packages("later")
install.packages("later", dependencies = T)
install.packages("later", dependencies = T, TRUE)
install.packages("installr") # install
install.packages("installr") # install
installr::updateR(T) # updating R.
quit()
install.packages(c("bigrquery", "mailR"))
library(c("bigrquery", "mailR"))
library(bigrquery)
library(mailR)
## load packages
if(!require(bigrquery)){install.packages("bigrquery"); require(bigrquery)}
if(!require(rmarkdown)){install.packages("rmarkdown"); require(rmarkdown)}
if(!require(knitr)){install.packages("knitr"); require(knitr)}
if(!require(mailR)){install.packages("mailR"); require(mailR)}
if(!require(lubridate)){install.packages("lubridate"); require(lubridate)}
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
if(!require(ggplot2)){install.packages("ggplot2"); require(ggplot2)}
if(!require(stringr)){install.packages("stringr"); require(stringr)}
if(!require(purrr)){install.packages("purrr"); require(purrr)}
if(!require(rlang)){install.packages("rlang"); require(rlang)}
# Big Query arguments
projectId <- "media-data-science"
dataset_staging <- "Jim_Story_Staging"
dataset_production <- "Jim_Story_Production"
dataset_audit <- "Jim_Story_Audit"
check_audit_a_query <- "
select max_date as last_entry_time
, sys_run_time as last_run_sys_time
, DATE_ADD(CURRENT_DATE(), 0, 'DAY') as current_run_time
, flag
from [media-data-science:Jim_Story_Audit.audit_a]
where job_number = (select max(job_number) from [media-data-science:Jim_Story_Audit.audit_a] where flag = 1)
"
# write query and save result
audit_a_maxdate <- query_exec(query = check_audit_a_query,
project = projectId,
use_legacy_sql = T)
# Big Query arguments
projectId <- "media-data-science"
dataset_staging <- "Jim_Story_Staging"
dataset_production <- "Jim_Story_Production"
dataset_audit <- "Jim_Story_Audit"
check_audit_a_query <- "
select max_date as last_entry_time
, sys_run_time as last_run_sys_time
, DATE_ADD(CURRENT_DATE(), 0, 'DAY') as current_run_time
, flag
from [media-data-science:Jim_Story_Audit.audit_a]
where job_number = (select max(job_number) from [media-data-science:Jim_Story_Audit.audit_a] where flag = 1)
"
# write query and save result
audit_a_maxdate <- query_exec(query = check_audit_a_query,
project = projectId,
use_legacy_sql = T)
ls(pos = "package:bigrquery")
red_flag2 <- query_exec(query = "select flag from [media-data-science:Jim_Story_Audit.audit_a]
where job_number = (select max(job_number) from [media-data-science:Jim_Story_Audit.audit_a])",
project = projectId,
use_legacy_sql = T) %>%
as.integer
set_access_cred(NULL)
get_access_cred()
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/lab/lab8")
library(car)
# par(mfrow = c(1, 2))
# hist(m_bty_gen$residuals, main = "histogram of the residuals")
# car::qqPlot(m_bty_gen, main = "qqplot of the residuals")
ls(pos = "package:car")
load("more/evals.RData")
par(mfrow = c(1, 2))
hist(evals$score, main = "histogram of score")
boxplot(evals$score, main = "boxplot of score")
with(evals,
plot(bty_avg ~ age))
with(evals,
cor.test(bty_avg, age))
m_bty <- lm(score ~ bty_avg, data = evals)
plot(jitter(evals$score) ~ jitter(evals$bty_avg))
abline(m_bty, lty = 2, col = "red")
summary(m_bty)
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
library(car)
# par(mfrow = c(1, 2))
# hist(m_bty_gen$residuals, main = "histogram of the residuals")
# car::qqPlot(m_bty_gen, main = "qqplot of the residuals")
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_all <- lm(score ~., data = evals)
library(MASS)
MASS::stepAIC(m_all, direction = "backward")
ls()
rm(list = ls())
load("more/evals.RData")
par(mfrow = c(1, 2))
hist(evals$score, main = "histogram of score")
boxplot(evals$score, main = "boxplot of score")
with(evals,
plot(bty_avg ~ age))
with(evals,
cor.test(bty_avg, age))
m_bty <- lm(score ~ bty_avg, data = evals)
plot(jitter(evals$score) ~ jitter(evals$bty_avg))
abline(m_bty, lty = 2, col = "red")
summary(m_bty)
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
library(car)
par(mfrow = c(1, 2))
hist(m_bty_gen$residuals, main = "histogram of the residuals")
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
load("more/evals.RData")
par(mfrow = c(1, 2))
hist(evals$score, main = "histogram of score")
boxplot(evals$score, main = "boxplot of score")
with(evals,
plot(bty_avg ~ age))
with(evals,
cor.test(bty_avg, age))
m_bty <- lm(score ~ bty_avg, data = evals)
plot(jitter(evals$score) ~ jitter(evals$bty_avg))
abline(m_bty, lty = 2, col = "red")
summary(m_bty)
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
library(car)
par(mfrow = c(1, 2))
hist(m_bty_gen$residuals, main = "histogram of the residuals")
car::qqPlot(m_bty_gen, main = "qqplot of the residuals")
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_all <- lm(score ~., data = evals)
library(MASS)
MASS::stepAIC(m_all, direction = "backward")
windows()
m_final <- lm(formula = score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_credits + bty_f1lower + bty_f1upper +
bty_f2upper + bty_avg + pic_outfit + pic_color, data = evals)
par(mfrow = c(1, 3))
hist(m_final$residuals, main = "histogram of the residuals")
car::qqPlot(m_final, main = "qqplot of the residuals")
multiLines(m_bty_gen)
m_final <- lm(formula = score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_credits + bty_f1lower + bty_f1upper +
bty_f2upper + bty_avg + pic_outfit + pic_color, data = evals)
par(mfrow = c(1, 3))
hist(m_final$residuals, main = "histogram of the residuals")
car::qqPlot(m_final, main = "qqplot of the residuals")
multiLines(m_final)
m_final <- lm(formula = score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_credits + bty_f1lower + bty_f1upper +
bty_f2upper + bty_avg + pic_outfit + pic_color, data = evals)
par(mfrow = c(1, 3))
hist(m_final$residuals, main = "histogram of the residuals")
car::qqPlot(m_final, main = "qqplot of the residuals")
plot(m_final$residuals)
m_final <- lm(formula = score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_credits + bty_f1lower + bty_f1upper +
bty_f2upper + bty_avg + pic_outfit + pic_color, data = evals)
par(mfrow = c(1, 3))
hist(m_final$residuals, main = "histogram of the residuals")
car::qqPlot(m_final, main = "qqplot of the residuals")
plot(m_final$residuals, main = "residuals' plot")
m_final <- lm(formula = score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_credits + bty_f1lower + bty_f1upper +
bty_f2upper + bty_avg + pic_outfit + pic_color, data = evals)
par(mfrow = c(1, 3))
hist(m_final$residuals, main = "histogram of the residuals")
car::qqPlot(m_final, main = "qqplot of the residuals")
plot(m_final$residuals, main = "residuals' plot")
m_final
summary(m_final)
m_final <- lm(formula = score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_credits + bty_f1lower + bty_f1upper +
bty_f2upper + bty_avg + pic_outfit + pic_color, data = evals)
summary(m_final)
par(mfrow = c(1, 3))
hist(m_final$residuals, main = "histogram of the residuals")
car::qqPlot(m_final, main = "qqplot of the residuals")
plot(m_final$residuals, main = "residuals' plot")
unique(evals$rank)
summary(m_final)
summary(m_full)
ls()
m_bty
summary(m_bty)
