install.packages(matlib)
install.packages("matlib")
?showEqn
?showeqn
ls(pos = "package:matlib")
library(matlib)
ls(pos = "package:matlib")
?showEqn
matlib::showEqn(A, b)
solve(A, b)
solve(A) %*% b
A
if(!require(matlib)){install.packages("matlib"); require(matlib)}
solve(A, b)
palindrome_check("Level ")
st = 'Create a list of the first letters of every word in this string'
ls()
library(stringr)
?str_split
str_split(st, " ")
str_split(st, " ") %>%
class
str_split(st, " ") %>%
map(., function(x) x[1])
str_split(st, " ") %>%
map(., function(x) {x[1]})
str_split(st, " ") %>%
map(., function(x) {x[[1]})
ls(pos = "package:stringr")
df <- str_split(st, " ")
df
df[1][1]
df[1][2]
df[[1]][1]
map(df, function(x) {print(x)[1]})
library(purrr)
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[[1]]})
df
df
map(df, function(x) {print(x)[1][[1]]})
map(df, function(x) {print(x)[1][1]})
df[1]
df[1][1]
df[1][1][1]
df %>% unlist
str_split("Create", "")
length(df[[1]])
unlist(df)
unlist(df) %>% length
unlist(df)[1]
str_split(unlist(df)[1])
str_split(unlist(df)[1], "")
str_split(unlist(df)[1], "")[1]
str_split(unlist(df)[1], "")[[1]]
str_split(unlist(df)[1], "")[[1]][1]
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
lapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
library(purrr)
ls(pos = "package:purrr")
m <- c(1, 2, 3, -4)
reduce(m, *)
reduce(m, "*")
accumulate(m, "*")
accumulate(m, "+")
m <- c(1, 2, 3, -4)
m
?accumulate
accumulate(m, `+`)
reduce(m, `*`)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
library(stringr)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(s == s[length(s):1])
}
palindrome('helleh')
palindrome('helleh!')
map(c('helleh', 'nurses run'), palindrom)
map(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh!', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
s <- 'I am Batman'
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s
s %in% letters
letters %in% s
all(letters %in% s)
ispangram <- function(s){
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(letters %in% s)
}
ispangram("The quick brown fox jumps over the lazy dog")
remove.packages("httpuv")
.libPaths()
devtools::install_github("jbryer/DATA606")
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
length(df$value)
df
df$odds[2]
df$value[1]
for (i in 1:length(df$value)){
print( paste0("Financial Advisors are ", round(df$odds[i], 2), " more likely to be interested in ", df$value[i]) )
}
library(broom)
ls(pos = "package:broom")
?inflate
data("mtcars")
head(mtcars)
boxplot(mpg)
boxplot(mpg, data = mtcars)
boxplot(mtcars$mpg, data = mtcars)
attach(mtcars)
sapply(mtcars, unique)
?crossing
library(broom)
?crossing
boxplot(mtcars$mpg, data = mtcars)
IQR(mpg)
boxplot(mtcars$mpg ~ vs, data = mtcars)
IQR(mpg ~ vs)
sapply(c(mpg, wt), IQR)
sapply(mtcars[, c(mpg, wt)], IQR)
mtcars[, c(mpg, wt)]
mtcars[, c("mpg", "wt")]
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars[, c("mpg", "wt")], IQR)
par(mar = c(1, 2))
par(mfrow = c(1, 2))
boxplot(mpg, col = 'red')
boxplot(wt, col = 'blue')
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars, unique)
sapply(mtcars, length(unique))
sapply(mtcars, function(x) length(unique(x)))
crossing(cyl, vs)
broom::crossing(cyl, vs)
search()
?crossing
library(tidyr)
tidyr::crossing(cyl, vs)
expand.grid(cyl, vs)
dim(mtcars)
df <- expand.grid(cyl, vs)
dim(df)
head9df
head(df)
sapply(df, unique)
df$combo <- paste(df$var1, df$Var2)
head(df)
df$combo <- paste(df$Var1, df$Var2)
head(df)
sapply(df, unique)
table(df$combo)
df$combo <- paste(df$Var1, df$Var2, sep = "-")
table(df$combo)
table(cyl, vs)
sapply(mtcars, function(x) length(unique(x)))
tidyr::crossing(cyl, vs)
?crossing
?plot
library(DATA606)
shiny_demo('DualScales', package = 'DATA606')
library(rlang)
library(ggplot2)
library(ggplot2)
shiny_demo('DualScales', package = 'DATA606')
install.packages('widyr')
library(widyr)
?pairwise_similarity
?inner_join
data(breslow.dat, package = "robust")
install.packages("robust"); library(robust)
data(breslow.dat, package = "robust")
attach(brewslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = brewslow.dat, family = poisson())
summary(fit)
attach(brewslow.dat)
data(breslow.dat, package = "robust")
ls()
head(breslow.dat)
attach(breslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
fit <- glm(sumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
?predict
?base::predict
summary(breslow.dat)
summary(breslow.dat)
head(breslow.dat)
ob <- data.frame(Base = c(22, 41), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
exp(coef(fit))
1.023 ^ 10
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "placebo"))
predict(fit, ob)
1.0229102 ^ 20 + 1.0230007 ^ 40 + 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1 / 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) + (1.0230007 ^ 40) + 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
exp(coef(fit))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
exp(0.8583864)
coef(fit)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
exp(1.94882593) * exp(0.02265174 ^ 20) * exp(0.02274013 ^ 40) * exp(-0.15270095)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 30), Trt = c("placebo", "progabide"))
exp(predict(fit, ob))
(21.84 - 18.75) / 21.84
library(tidyverse)
library(Rcpp)
library(dplyr)
update.packages()
library(DATA606)
library(tidyverse)
update.packages()
quit
quit()
library(tidyverse)
remove.packages("Rcpp")
install.packages("Rcpp")
library(tidyverse)
library(DATA606)
install.packages("digest")
library(DATA606)
library(dplyr)
remove.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("yaml", dependencies = T)
library(dplyr)
install.packages("purrr")
library(purrr)
library(dplyr)
ls(pos = "package:dplyr")
library(dplyr)
library(DATA606)
install.packages("later")
library(DATA606)
library(Rcpp)
library(DATA606)
install.packages("later")
install.packages("later", dependencies = T)
install.packages("later", dependencies = T, TRUE)
install.packages("installr") # install
install.packages("installr") # install
installr::updateR(T) # updating R.
quit()
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/lab")
library(DATA606)
ls(pos = "package:DATA606")
startLab("lab4")
startLab("lab4b")
getwd()
dir()
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/lab/lab4b")
dir()
load("more/ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
windows()
hist(samp)
shapiro.test(samp)
library(doBy)
install.packages("doBy")
summary(samp)
shapiro.test(samp)
hist(samp)
summary(samp)
sd(samp)
shapiro.test(samp)
hist(samp)
summary(samp)
sd(samp)
shapiro.test(samp)
hist(samp, breaks = 10)
summary(samp)
sd(samp)
shapiro.test(samp)
hist(samp, breaks = 20)
summary(samp)
sd(samp)
shapiro.test(samp)
hist(samp, breaks = 15)
summary(samp)
sd(samp)
sample_mean <- mean(samp)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
sample_mean
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
ls()
lower %>% dim
library(tidyverse)
lower %>% dim
lower %>% dim()
lower_vector %>% dim()
lower_vector
mean(population)
length(lower_vector)
df <- data.frame(lower_vector, upper_vector, rep(mean(population), length(upper_vector)))
df <- data.frame(lower_vector, upper_vector, rep(mean(population), m = length(upper_vector)))
ifelse(lower_vector < m & upper_vector > m, 1, 0)
with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))
sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0)))
48/50
plot_ci(lower_vector, upper_vector, mean(population))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
4/50
2/50
windows()
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
lower_vector <- samp_mean - 1.64 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.64 * samp_sd / sqrt(n)
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
lower_vector <- samp_mean - 1.64 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.64 * samp_sd / sqrt(n)
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
lower_vector <- samp_mean - 1.64 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.64 * samp_sd / sqrt(n)
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
set.seed(1234)
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
set.seed(123)
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
lower_vector <- samp_mean - 1.64 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.64 * samp_sd / sqrt(n)
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
lower_vector <- samp_mean - 1.64 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.64 * samp_sd / sqrt(n)
plot_ci(lower_vector, upper_vector, mean(population))
df <- data.frame(lower_vector, upper_vector, m = rep(mean(population), length(upper_vector)))
(sum(with(df, ifelse(lower_vector < m & upper_vector > m, 1, 0))) / 50) * 100
