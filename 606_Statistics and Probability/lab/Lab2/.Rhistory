paste(unlist(custom_stop_words), sep = ", ")
test <- c("analyst analysts april article articles august bloomberg bloombergbloomberg bloombergbloombergs bloombergs bloombergsbloombergs business businesses click clicked clicks comment commented commenting comments companies company contact contacts countries country day days dayto december donald editor editors february fellto friday front include included includes including its january journalist journalists july june march market markets may monday november october ofbillion ofbillions ofmillion ofmillions opinion opinions orpercent people percent person photographer photographers report reported reporter reporters reporting reports responsible saturday sell selling sells september sold source sources statement statements stories story sunday talk talked talking talks tell telling tells thursday toeuro toeuros told topercent topercents tousd trump tuesday wednesday week weeks weekto world worlds year years yearto")
library(tidyverse)
?separate
separate
test %>%
separate(., sep = " ")
test %>%
as.data.frame %>%
separate(., sep = " ")
test %>%
as.data.frame
t <- test %>%
as.data.frame
head(t)
str(t)
library(stringr)
test %>% str_split(pattern = " ", test)
test %>% str_split(pattern = " ", test) %>% unlist
test %>% str_split(., pattern = " ")
test2 %>% stringr::str_split(., pattern = " ")
test2 <- test %>% stringr::str_split(., pattern = " ")
custom_stop_words == test2
custom_stop_words
paste(unlist(custom_stop_words), sep = ", ")
paste(unlist(custom_stop_words), collapse = ", ")
test <- paste(unlist(custom_stop_words), collapse = ", ")
test
write.csv(test, "clipboard", row.names = F)
test2 <- test %>% stringr::str_split(., pattern = ", ")
test2
class(test)
one_quote <- paste(unlist(custom_stop_words), collapse = ", ")  # the custom stop words list from xlsx
unquote <- one_quote %>%
stringr::str_split(., pattern = ", ")
custom_stop_words == unquote
unquote
unquote <- one_quote %>%
stringr::str_split(., pattern = ", ") %>%
unlist
unquote
custom_stop_words == unquote
which(!custom_stop_words == unquote)
stop_words <- c("analyst, analysts, april, article, articles, august, bloomberg, bloombergbloomberg, bloombergbloombergs, bloombergs, bloombergsbloombergs, business, businesses, click, clicked, clicks, comment, commented, commenting, comments, companies, company, contact, contacts, countries, country, day, days, dayto, december, donald, editor, editors, february, fellto, friday, front, include, included, includes, including, its, january, journalist, journalists, july, june, march, market, markets, may, monday, november, october, ofbillion, ofbillions, ofmillion, ofmillions, opinion, opinions, orpercent, people, percent, person, photographer, photographers, report, reported, reporter, reporters, reporting, reports, responsible, saturday, sell, selling, sells, september, sold, source, sources, statement, statements, stories, story, sunday, talk, talked, talking, talks, tell, telling, tells, thursday, toeuro, toeuros, told, topercent, topercents, tousd, trump, tuesday, wednesday, week, weeks, weekto, world, worlds, year, years, yearto")
stop_words <- stop_words %>%
stringr::str_split(., pattern = ", ") %>%
unlist
custom_stop_words <- tibble(word = stop_words)
custom_stop_words
q()
ls()
rm(list = ls())
param1 <- 1
exists(c("param1", "param2", "param3", "param4", "param5", "param6", "j_sql", "j_body", "j"))
if(exists(c("param1", "param2", "param3", "param4", "param5", "param6", "j_sql", "j_body", "j"))){
rm(param1, param2, param3, param4, param5, param6, j_sql, j_body, j)
}
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
rm(list = ls())
library(plotly)
?ggplotly
ls()
getwd()
ls()
ls()
library(plyr)
?ldply
?ldply
Name <- c("Adam", "Peter", "Julia", "Ron")
Courses <- c("Math, Physics, Chemistry", "English, History, Sociology", "Physics, Botany, Chemistry", "Chemistry, Physics, Biology")
df <- data.frame(Name, Courses)
df
names(df)
df2 <- data.frame(Name = "Stephanie", Courses = "Math, Geography, Chemistry")
df2
df <- rbind(df, df2)
df
df$Total_Score <- c(90, 65, 80, 75, 85)
df
print("apple")[1]
if(!require(stringr)){install.packages("stringr"); require(stringr)}
ls(pos = "package:stringr")
?str_split
str_split("apple", "")
str_split("apple", "", simplify = T)
str_split("apple", "")[[1]]
str_split("apple", "")[[1]][5]
str_split("apple", "")[[1]] %>% length
?tolower
string <- "Apple"
string <- tolower(string)
string
s <- stringr::str_split(string, "")[[1]]
s
length(s):1
print(s)[length(s):1]
print(s[length(s):1])
?paste
print(s[length(s):1]) %>% paste0
s[length(s):1]
s[length(s):1] %>% paste0(., "")
s
s.reverse <- s[length(s):1]
s == s.reverse
xor(s == s.reverse)
isTRUE(xor(s == s.reverse))
xor(s, s.reverse)
isTRUE(s, s.reverse)
s == s.reverse
s == s.reverse
class(s == s.reverse)
ifelse(s == s.reverse){print "TRUE"}
?any
any(s == s.reverse)
all(s == s.reverse)
palindrome <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- tolower(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
return(all(s == s.reverse))
}
palindrome("Apple")
palindrome("Otto")
palindrome("Level")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- tolower(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
palindrome_check("Level")
palindrome_check("Jimmy")
"apple" == "apple"
"apple" == "applE"
word_check <- function(string1, string2){
string1 <- tolower(string1)
string2 <- tolower(string2)
string1 == string2
}
word_check("apple", "applE")
word_check("ORANGE", "applE")
?str_trunc
str_trunc(" apple")
ls(pos = "package:stringr")
str_trim("apple ")
str_to_lower("APPLE")
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- string::str_to_lower(string1)
string1 <- string::str_trim(string1)
string2 <- string::str_to_lower(string2)
string2 <- string::str_trim(string2)
string1 == string2
}
word_check("apple", "applE")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- stringr::str_to_lower(string)
string <- stringr::str_trim(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
string2 <- stringr::str_trim(string2)
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check("apple", "applE")
word_check("ORANGE", "applE")
word_check(" apple", "applE")
word_check(" appl e", "applE")
word_check(" apple ", "applE")
word_check(" apple", "applE ")
palindrome_check <- function(string) {
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string <- stringr::str_to_lower(string)
string <- stringr::str_trim(string)
s <- stringr::str_split(string, "")[[1]]
s.reverse <- s[length(s):1]
all(s == s.reverse)
}
palindrome_check("civil ")
palindrome_check("civic ")
palindrome_check("OTTO ")
word_check <- function(string1, string2){
if(!require(stringr)){install.packages("stringr"); require(stringr)}
string1 <- stringr::str_to_lower(string1)
string1 <- stringr::str_trim(string1)
string2 <- stringr::str_to_lower(string2)
string2 <- stringr::str_trim(string2)
string1 == string2
}
word_check(" apple", "applE ")
word_check("ORANGE", "applE")
A <- matrix(c(4, -4, 5, 6, -1, 0, -2, 2, -3),
3,
3,
byrow = TRUE)
A
b <- c(-34, -6, 19)
install.packages(matlib)
install.packages("matlib")
?showEqn
?showeqn
ls(pos = "package:matlib")
library(matlib)
ls(pos = "package:matlib")
?showEqn
matlib::showEqn(A, b)
solve(A, b)
solve(A) %*% b
A
if(!require(matlib)){install.packages("matlib"); require(matlib)}
solve(A, b)
palindrome_check("Level ")
st = 'Create a list of the first letters of every word in this string'
ls()
library(stringr)
?str_split
str_split(st, " ")
str_split(st, " ") %>%
class
str_split(st, " ") %>%
map(., function(x) x[1])
str_split(st, " ") %>%
map(., function(x) {x[1]})
str_split(st, " ") %>%
map(., function(x) {x[[1]})
ls(pos = "package:stringr")
df <- str_split(st, " ")
df
df[1][1]
df[1][2]
df[[1]][1]
map(df, function(x) {print(x)[1]})
library(purrr)
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[1]})
map(df, function(x) {print(x)[[1]]})
df
df
map(df, function(x) {print(x)[1][[1]]})
map(df, function(x) {print(x)[1][1]})
df[1]
df[1][1]
df[1][1][1]
df %>% unlist
str_split("Create", "")
length(df[[1]])
unlist(df)
unlist(df) %>% length
unlist(df)[1]
str_split(unlist(df)[1])
str_split(unlist(df)[1], "")
str_split(unlist(df)[1], "")[1]
str_split(unlist(df)[1], "")[[1]]
str_split(unlist(df)[1], "")[[1]][1]
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
lapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
library(purrr)
ls(pos = "package:purrr")
m <- c(1, 2, 3, -4)
reduce(m, *)
reduce(m, "*")
accumulate(m, "*")
accumulate(m, "+")
m <- c(1, 2, 3, -4)
m
?accumulate
accumulate(m, `+`)
reduce(m, `*`)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
library(stringr)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(s == s[length(s):1])
}
palindrome('helleh')
palindrome('helleh!')
map(c('helleh', 'nurses run'), palindrom)
map(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh!', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
s <- 'I am Batman'
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s
s %in% letters
letters %in% s
all(letters %in% s)
ispangram <- function(s){
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(letters %in% s)
}
ispangram("The quick brown fox jumps over the lazy dog")
remove.packages("httpuv")
.libPaths()
devtools::install_github("jbryer/DATA606")
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
length(df$value)
df
df$odds[2]
df$value[1]
for (i in 1:length(df$value)){
print( paste0("Financial Advisors are ", round(df$odds[i], 2), " more likely to be interested in ", df$value[i]) )
}
library(broom)
ls(pos = "package:broom")
?inflate
data("mtcars")
head(mtcars)
boxplot(mpg)
boxplot(mpg, data = mtcars)
boxplot(mtcars$mpg, data = mtcars)
attach(mtcars)
sapply(mtcars, unique)
?crossing
library(broom)
?crossing
boxplot(mtcars$mpg, data = mtcars)
IQR(mpg)
boxplot(mtcars$mpg ~ vs, data = mtcars)
IQR(mpg ~ vs)
sapply(c(mpg, wt), IQR)
sapply(mtcars[, c(mpg, wt)], IQR)
mtcars[, c(mpg, wt)]
mtcars[, c("mpg", "wt")]
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars[, c("mpg", "wt")], IQR)
par(mar = c(1, 2))
par(mfrow = c(1, 2))
boxplot(mpg, col = 'red')
boxplot(wt, col = 'blue')
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars, unique)
sapply(mtcars, length(unique))
sapply(mtcars, function(x) length(unique(x)))
crossing(cyl, vs)
broom::crossing(cyl, vs)
search()
?crossing
library(tidyr)
tidyr::crossing(cyl, vs)
expand.grid(cyl, vs)
dim(mtcars)
df <- expand.grid(cyl, vs)
dim(df)
head9df
head(df)
sapply(df, unique)
df$combo <- paste(df$var1, df$Var2)
head(df)
df$combo <- paste(df$Var1, df$Var2)
head(df)
sapply(df, unique)
table(df$combo)
df$combo <- paste(df$Var1, df$Var2, sep = "-")
table(df$combo)
table(cyl, vs)
sapply(mtcars, function(x) length(unique(x)))
tidyr::crossing(cyl, vs)
?crossing
?plot
library(DATA606)
shiny_demo('DualScales', package = 'DATA606')
library(rlang)
library(ggplot2)
library(ggplot2)
shiny_demo('DualScales', package = 'DATA606')
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/lab")
library(DATA606)
startLab('Lab2')
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/lab/Lab2")
load("more/kobe.RData")
head(kobe)
ls()
head(kobe)
load("more/kobe.RData")
head(kobe)
ls()
dim(kobe)
kobe[, c(vs, game)]
head(kobe[, c(kobe$vs, kobe$game)])
head(kobe[, c("vs", "game")])
sapply(kobe[, c("vs", "game")], unique)
str(kobe)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
prop.table(ftable(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
set.seed(1234)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
set.seed(1234)
sim_basket <- sample(outcomes, size = 133, replace = T, prob = c(0.45, 0.55))
prop.table(table(sim_basket))
?sample
set.seed(1234)
sim_basket <- sample(outcomes, size = 133, replace = T, prob = c(0.45, 0.55))
# prop.table(table(sim_basket))
length(sim_basket)
kobe$basket
sim_basket
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
set.seed(1234)
sim_basket <- sample(outcomes, size = 133, replace = T, prob = c(0.45, 0.55))
# prop.table(table(sim_basket))
kobe$basket
sim_basket
set.seed(1234)
sim_basket <- sample(outcomes, size = 133, replace = T, prob = c(0.45, 0.55))
prop.table(table(sim_basket))
kobe$basket
sim_basket
set.seed(1234)
sim_basket <- sample(outcomes, size = 133, replace = T, prob = c(0.45, 0.55))
# prop.table(table(sim_basket))
kobe$basket
sim_basket
kobe$basket
sim_basket
sim_basket
table(sim_basket)
sb <- calc_streak(sim_basket)
table(sb)
table(sb); prop.table(table(sb))
sb <- calc_streak(sim_basket)
table(sb); round( prop.table(table(sb)), 2 )
set.seed(1234)
sim_basket <- sample(outcomes, size = 133, replace = T, prob = c(0.45, 0.55))
# prop.table(table(sim_basket))
barplot(sb)
barplot(table(sb))
barplot(table(sb), main = "Streak of sim_basket")
pbinom(0.45 * 133, size = 133, prob = 0.45)
0.45 * 133
dbinom(50, 100, prob = 0.5)
head(kobe)
calc_streak(kobe$basket)
table(calc_streak(kobe$basket))
table(sb)
chisq.test(table(calc_streak(kobe$basket)),
table(sb))
table(calc_streak(kobe$basket))
table(sb)
chisq.test(table(calc_streak(kobe$basket)),
table(sb),
correct = T)
chisq.test(table(calc_streak(kobe$basket)),
table(sb),
correct = T)
chisq.test(table(calc_streak(kobe$basket)),
table(sb),
correct = T)
