str_split(unlist(df)[1])
str_split(unlist(df)[1], "")
str_split(unlist(df)[1], "")[1]
str_split(unlist(df)[1], "")[[1]]
str_split(unlist(df)[1], "")[[1]][1]
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
lapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
sapply(1:length(df[[1]]), function(x) {
str_split(unlist(df)[x], "")[[1]][1]
})
library(purrr)
ls(pos = "package:purrr")
m <- c(1, 2, 3, -4)
reduce(m, *)
reduce(m, "*")
accumulate(m, "*")
accumulate(m, "+")
m <- c(1, 2, 3, -4)
m
?accumulate
accumulate(m, `+`)
reduce(m, `*`)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
library(stringr)
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s == s[length(s):1]
}
palindrome('helleh')
palindrome <- function(s){
s <- str_replace_all(s, pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(s == s[length(s):1])
}
palindrome('helleh')
palindrome('helleh!')
map(c('helleh', 'nurses run'), palindrom)
map(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
map_dbl(c('helleh!', 'nurses run'), palindrome)
map_dbl(c('helleh', 'nurses run'), palindrome)
s <- 'I am Batman'
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
s
s %in% letters
letters %in% s
all(letters %in% s)
ispangram <- function(s){
s <- str_to_lower(s) %>%
str_replace_all(pattern = " ", replacement = "") %>%
str_split("") %>%
unlist
all(letters %in% s)
}
ispangram("The quick brown fox jumps over the lazy dog")
remove.packages("httpuv")
.libPaths()
devtools::install_github("jbryer/DATA606")
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
df <- read.table("clipboard",
sep = '\t', comment.char = "", header = T,
stringsAsFactors = F, fill = T,
quote = "\n", allowEscapes = T
)
head(df)
length(df$value)
df
df$odds[2]
df$value[1]
for (i in 1:length(df$value)){
print( paste0("Financial Advisors are ", round(df$odds[i], 2), " more likely to be interested in ", df$value[i]) )
}
library(broom)
ls(pos = "package:broom")
?inflate
data("mtcars")
head(mtcars)
boxplot(mpg)
boxplot(mpg, data = mtcars)
boxplot(mtcars$mpg, data = mtcars)
attach(mtcars)
sapply(mtcars, unique)
?crossing
library(broom)
?crossing
boxplot(mtcars$mpg, data = mtcars)
IQR(mpg)
boxplot(mtcars$mpg ~ vs, data = mtcars)
IQR(mpg ~ vs)
sapply(c(mpg, wt), IQR)
sapply(mtcars[, c(mpg, wt)], IQR)
mtcars[, c(mpg, wt)]
mtcars[, c("mpg", "wt")]
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars[, c("mpg", "wt")], IQR)
par(mar = c(1, 2))
par(mfrow = c(1, 2))
boxplot(mpg, col = 'red')
boxplot(wt, col = 'blue')
sapply(mtcars[, c("mpg", "wt")], IQR)
sapply(mtcars, unique)
sapply(mtcars, length(unique))
sapply(mtcars, function(x) length(unique(x)))
crossing(cyl, vs)
broom::crossing(cyl, vs)
search()
?crossing
library(tidyr)
tidyr::crossing(cyl, vs)
expand.grid(cyl, vs)
dim(mtcars)
df <- expand.grid(cyl, vs)
dim(df)
head9df
head(df)
sapply(df, unique)
df$combo <- paste(df$var1, df$Var2)
head(df)
df$combo <- paste(df$Var1, df$Var2)
head(df)
sapply(df, unique)
table(df$combo)
df$combo <- paste(df$Var1, df$Var2, sep = "-")
table(df$combo)
table(cyl, vs)
sapply(mtcars, function(x) length(unique(x)))
tidyr::crossing(cyl, vs)
?crossing
?plot
library(DATA606)
shiny_demo('DualScales', package = 'DATA606')
library(rlang)
library(ggplot2)
library(ggplot2)
shiny_demo('DualScales', package = 'DATA606')
install.packages('widyr')
library(widyr)
?pairwise_similarity
?inner_join
data(breslow.dat, package = "robust")
install.packages("robust"); library(robust)
data(breslow.dat, package = "robust")
attach(brewslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = brewslow.dat, family = poisson())
summary(fit)
attach(brewslow.dat)
data(breslow.dat, package = "robust")
ls()
head(breslow.dat)
attach(breslow.dat)
fit <- glm(SumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
fit <- glm(sumY ~ Base + Age + Trt, data = breslow.dat, family = poisson())
summary(fit)
?predict
?base::predict
summary(breslow.dat)
summary(breslow.dat)
head(breslow.dat)
ob <- data.frame(Base = c(22, 41), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "progabide"))
predict(fit, ob)
exp(coef(fit))
1.023 ^ 10
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("placebo", "placebo"))
predict(fit, ob)
1.0229102 ^ 20 + 1.0230007 ^ 40 + 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1 / 0.8583864
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 1
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
(1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
(1.0229102 ^ 20) + (1.0230007 ^ 40) + 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 40), Trt = c("progabide", "progabide"))
predict(fit, ob)
exp(coef(fit))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
exp(0.8583864)
coef(fit)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
exp(1.94882593) * exp(0.02265174 ^ 20) * exp(0.02274013 ^ 40) * exp(-0.15270095)
exp(1.94882593 * (0.02265174 ^ 20) * (0.02274013 ^ 40) * -0.15270095)
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
exp(predict(fit, ob))
7.0204403 * (1.0229102 ^ 20) * (1.0230007 ^ 40) * 0.8583864
ob <- data.frame(Base = c(20, 20), Age = c(30, 30), Trt = c("placebo", "progabide"))
exp(predict(fit, ob))
(21.84 - 18.75) / 21.84
library(tidyverse)
library(Rcpp)
library(dplyr)
update.packages()
library(DATA606)
library(tidyverse)
update.packages()
quit
quit()
library(tidyverse)
remove.packages("Rcpp")
install.packages("Rcpp")
library(tidyverse)
library(DATA606)
install.packages("digest")
library(DATA606)
library(dplyr)
remove.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("yaml", dependencies = T)
library(dplyr)
install.packages("purrr")
library(purrr)
library(dplyr)
ls(pos = "package:dplyr")
library(dplyr)
library(DATA606)
install.packages("later")
library(DATA606)
library(Rcpp)
library(DATA606)
install.packages("later")
install.packages("later", dependencies = T)
install.packages("later", dependencies = T, TRUE)
install.packages("installr") # install
install.packages("installr") # install
installr::updateR(T) # updating R.
quit()
setwd("C:/Users/traveler/Desktop/SPS/606_Statistics and Probability/presentation")
dir()
unlink("presentation_ch4_4.3_JimmyNg_20181024", recursive = T)
dir()
knitr::opts_chunk$set(echo = TRUE)
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
simulation <- rnorm(100, mean = mean, sd = sd)
simulation
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
simulation <- rnorm(100, mean = mean, sd = sd)
hist(simulation, main = "Number of credits")
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
simulation <- rnorm(100, mean = mean, sd = sd)
hist(simulation, main = "Number of credits", breaks = 10)
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
set.seed(1234)
simulation <- rnorm(100, mean = mean, sd = sd)
hist(simulation, main = "Number of credits", breaks = 10)
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
set.seed(1112)
simulation <- rnorm(100, mean = mean, sd = sd)
hist(simulation, main = "Number of credits", breaks = 10)
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
set.seed(123)
simulation <- rnorm(100, mean = mean, sd = sd)
hist(simulation, main = "Number of credits", breaks = 10)
min <- 8
q1 <- 13
median <- 14
mean <- 13.65
sd <- 1.91
q3 <- 15
max <- 18
set.seed(12345)
simulation <- rnorm(100, mean = mean, sd = sd)
hist(simulation, main = "Number of credits", breaks = 10)
ls()
mean
sd
(16 - 13.65) / 1.91
pnorm(1.230366, mean, sd)
pnorm(16, mean, sd)
pnorm(16, mean, sd, lower.tail = T)
pnorm(16, mean, sd, lower.tail = F)
qnorm(0.89, mean, sd)
?pnrom
?pnorm
density(x = rnorm(100, 100, 10))
plot(density(x = rnorm(100, 100, 10)))
plot(x = rnorm(100, mean, sd))
plot(x = rnorm(100, mean, sd), type = "l")
plot(density(x = rnorm(100, 100, 10)))
plot(density(x = rnorm(1000, 100, 10)))
plot(density(x = rnorm(100000, 100, 10)))
plot(density(x = rnorm(100000, 100, 10)), main = "")
plot(density(x = rnorm(100000, 100, 10)), main = "", xlab = "")
plot(density(x = rnorm(100000, mean, sd)), main = "", xlab = "")
abline(v = 16, col = "red")
abline(v = 16, col = "red", lty = 2)
plot(density(x = rnorm(100000, mean, sd)), main = "", xlab = "")
abline(v = 16, col = "red", lty = 2)
abline(v = 18, col = "blue", lty = 2)
# simulation
set.seed(12345); plot(density(x = rnorm(10000, mean, sd)), main = "", xlab = "")
abline(v = 16, col = "red", lty = 2)
abline(v = 18, col = "blue", lty = 2)
# percent of area on the right of 16 credits
round(100 * pnorm(16, mean, sd, lower.tail = F), 2)
# percent of area on the right of 18 credits
round(100 * pnorm(18, mean, sd, lower.tail = F), 2)
# simulation
set.seed(12345); plot(density(x = rnorm(10000, mean, sd)), main = "", xlab = "")
abline(v = 16, col = "red", lty = 2)
abline(v = 18, col = "blue", lty = 2)
# percent of area on the right of 16 credits
round(100 * pnorm(16, mean, sd, lower.tail = F), 2)
# percent of area on the right of 18 credits
round(100 * pnorm(18, mean, sd, lower.tail = F), 2)
# simulation
set.seed(12345)
plot(density(x = rnorm(10000, mean, sd)),
main = "simulation of number of college credits per semester",
xlab = "college credits")
abline(v = 16, col = "red", lty = 2)
abline(v = 18, col = "blue", lty = 2)
# percent of area on the right of 16 credits
print(paste("percent of area on the right of 16 credits is ",
round(100 * pnorm(16, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
# percent of area on the right of 18 credits
print(paste("percent of area on the right of 18 credits is ",
round(100 * pnorm(18, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
# simulation
set.seed(12345)
plot(density(x = rnorm(10000, mean, sd)),
main = "simulation of number of college credits per semester",
xlab = "college credits")
abline(v = 16, col = "red", lty = 2)
abline(v = 18, col = "blue", lty = 2)
# percent of area on the right of 16 credits
print(paste("percent of area on the right of 16 credits is approximately ",
round(100 * pnorm(16, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
# percent of area on the right of 18 credits
print(paste("percent of area on the right of 18 credits is approximately ",
round(100 * pnorm(18, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
# simulation
set.seed(12345)
plot(density(x = rnorm(10000, mean, sd)),
main = "simulation of number of college credits per semester",
xlab = "college credits")
abline(v = mean, col = "black", lty = 2)  # mean
abline(v = 16, col = "blue", lty = 2)  # 16-credit
abline(v = 18, col = "red", lty = 2)  # 18-credit
# percent of area on the right of 16 credits
print(paste("percent of area on the right of 16 credits is approximately ",
round(100 * pnorm(16, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
# percent of area on the right of 18 credits
print(paste("percent of area on the right of 18 credits is approximately ",
round(100 * pnorm(18, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
?plot
# simulation
set.seed(12345)
plot(density(x = rnorm(10000, mean, sd)),
main = "simulation of number of college credits per semester",
xlab = "college credits")
abline(v = mean, col = "black", lty = 2)  # mean
abline(v = 16, col = "blue", lty = 2)  # 16-credit
abline(v = 18, col = "red", lty = 2)  # 18-credit
# 16-credit
print(paste("percent of area on the right of 16 credits (beyond blue line) is approximately ",
round(100 * pnorm(16, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
# 18-credit
print(paste("percent of area on the right of 18 credits (beyond red line) is approximately ",
round(100 * pnorm(18, mean, sd, lower.tail = F), 1),
"%",
sep = ""))
ls()
margin_of_error <- 1.96 * (sd / sqrt(100))
ci <- c(mean - margin_of_error, mean + margin_of_error)
ci
ci <- round(c(mean - margin_of_error, mean + margin_of_error), 2)
ci
sqrt(100)
sd
rm(ci)
confidence_intervals <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals
margin_of_error <- 1.96 * (sd / sqrt(100))
confidence_intervals <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals
margin_of_error <- 1.96 * (sd / sqrt(100))
confidence_intervals <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals
dnorm(100, 100 10)
dnorm(100, mean = 100, sd = 10)
qnorm(0.95, mean = 100, sd = 10)
pnorm(0.95, mean = 100, sd = 10)
pnorm(116, mean = 100, sd = 10)
pnorm(116, mean = 0, sd = 1)
pnorm(1, mean = 0, sd = 1)
qnorm(1, mean = 0, sd = 1)
qnorm(.95, mean = 0, sd = 1)
qnorm(.9725, mean = 0, sd = 1)
qnorm(.975, mean = 0, sd = 1)
qnorm(.995, mean = 0, sd = 1)
1-.975
(1-.975) * 2
(1-.995) * 2
# 95% confidence intervals
margin_of_error <- 1.96 * (sd / sqrt(100))
confidence_intervals <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals
# 99% confidence intervals
margin_of_error <- 2.58 * (sd / sqrt(100))
confidence_intervals99 <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals99
# 95% confidence intervals
margin_of_error <- 1.96 * (sd / sqrt(100))
confidence_intervals <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals
# 99% confidence intervals
margin_of_error99 <- 2.58 * (sd / sqrt(100))
confidence_intervals99 <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals99
# 95% confidence intervals
margin_of_error <- 1.96 * (sd / sqrt(100))
confidence_intervals <- round( c(mean - margin_of_error,
mean + margin_of_error), 2 )
confidence_intervals
# 99% confidence intervals
margin_of_error99 <- 2.58 * (sd / sqrt(100))
confidence_intervals99 <- round( c(mean - margin_of_error99,
mean + margin_of_error99), 2 )
confidence_intervals99
update.packages("ratpack")
update.packages("rsconnect")
