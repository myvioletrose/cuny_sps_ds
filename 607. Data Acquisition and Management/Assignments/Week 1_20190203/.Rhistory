companies <- lapply(1:length(companies), function(x) companies[[x]] <- names(companies)[x])
# system.time( companies <- lapply(1:length(companies), function(x) overview(companies[[x]])) )
system.time( companies <- purrr::map(1:length(companies), function(x) overview(companies[[x]])) )  # a little faster
# remove NA result first
remove <- lapply(1:length(companies), function(x) is.na(companies[x])) %>% unlist %>% which
keep <- c(1:length(companies))[1:length(companies) %nin% remove]
# extract only V0:V7 columns
extract <- function(x){
x <- dplyr::select(x, V0, V1, V2, V3, V4, V5, V6, V7)
return(x)
}
# must use purrr::safely - fail-safe approach
extract_safely <- purrr::safely(extract, otherwise = NA_real_)
# extract, combine into a single df, and then rename columns
companyDf <- purrr::map(companies[keep], extract_safely) %.>%
purrr::transpose(.)
companyDf <- companyDf$result %>%
plyr::ldply(., data.frame)
names(companyDf) <- c("company", "website", "headquarters", "size",
"founded", "type", "industry", "revenue")
# change Factor to Chr, use str_trim to remove white space
companyDf <- companyDf[, 1:8]  # have to subset first; dplyr::select does not allow NA column
companyDf <- companyDf[complete.cases(companyDf), ] %>%
dplyr::mutate( website = as.character(website) %>% stringr::str_trim(.),
headquarters = as.character(headquarters) %>% stringr::str_trim(.),
size = as.character(size) %>% stringr::str_trim(.),
founded = stringr::str_extract_all(founded, "[0-9]+") %>% as.numeric,
type = as.character(type) %.>%
gsub(".*[Pp]rivate.*", "private", .) %.>%
gsub(".*[Pp]ublic.*", "public", .) %>%
stringr::str_trim(.),
industry = as.character(industry) %>% stringr::str_trim(.),
revenue = as.character(revenue) %>% stringr::str_trim(.),
run_time = Sys.time() )
# complete.cases() again, b/c of some misplacing columns
# some jobs have 10 columns and there's some mismatch when we manually pull V1:V7 columns
# for example, "founded" value would be misplaced in the "type" column
# an imperfect and temporary solution is to do complete.cases() one more time to rid the NA
companyDf <- companyDf[complete.cases(companyDf), ]
# setwd to data/company
setwd("../"); setwd("data/company")
# save as txt
run_time2 <- companyDf$run_time %>% unique %.>% gsub(pattern = ":", replacement = "", x = .)
filename2 <- paste0("companyDf_", run_time2, ".txt", sep = "")
write.table(companyDf, file = filename2, sep = "\t", row.names = F, append = F)
# reset wd
setwd(currentwd)
##############################################
##### step 5.1 : update (delete), insert #####
##############################################
setwd("../"); setwd("data")
# load the _agg tables
jobDf_agg <- readRDS(file = "jobDf_agg.RDS")
companyDf_agg <- readRDS(file = "companyDf_agg.RDS")
#######################
# delete, insert, save
# job
jobListingId_agg <- jobDf_agg$jobListingId
jobListingId_now <- jobDf$jobListingId
del <- jobListingId_agg[jobListingId_agg %in% jobListingId_now]
jobDf_agg <- jobDf_agg %>%
dplyr::filter(jobListingId %nin% del) %.>%  # delete
dplyr::bind_rows(., jobDf)  # append
saveRDS(jobDf_agg, file = "jobDf_agg.RDS")  # save
# company
company_agg <- companyDf_agg$company
company_now <- companyDf$company
del2 <- company_agg[company_agg %in% company_now]
companyDf_agg <- companyDf_agg %>%
dplyr::filter(company %nin% del2) %.>%  # delete
dplyr::bind_rows(., companyDf)  # append
saveRDS(companyDf_agg, file = "companyDf_agg.RDS")  # save
#######################
# reset wd
setwd(currentwd)
############################
##### step 5.2 : merge #####
############################
### CAUTION : there is always missing data for some companies overview ###
# let's merge (instead of left join) jobDf_agg and companyDf_agg together
jpr <- merge(jobDf_agg, companyDf_agg, by = "company") %>%
# filter job titles that are not relevant
dplyr::filter(title %in% title[!grepl("(architect|software|engineer|director)", title, ignore.case = T)]) %>%
# filter by job posting last_updated within past 14 days
# dplyr::filter(last_updated > Sys.Date() -14) %>%
# filter out duplicated jobListingId - this happens b/c same job with same Id can have different urls
group_by(jobListingId) %>%
dplyr::mutate(row = row_number()) %>%
ungroup %>%
dplyr::filter(row == 1) %>%
select(jobListingId, title, company, last_updated, salary_min_est, salary_max_est, salary_est, review, url,
website, headquarters, size, founded, type, industry, revenue, description) %>%
arrange(company, title, last_updated)
View(jpr)
setwd("C:/Users/traveler/Desktop/SPS/607. Data Acquisition and Management/Assignments/Week 1_20190203")
?download.file
url <- "https://archive.ics.uci.edu/ml/datasets/Mushroom"
download.file(url, "mushroom.txt", method, quiet = FALSE, mode = "w",
cacheOK = TRUE)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
download.file(url, "mushroom.txt", method, quiet = FALSE, mode = "w",
cacheOK = TRUE)
download.file(url, "mushroom.txt", method = "wininet", quiet = FALSE, mode = "w",
cacheOK = TRUE)
dir()
######################################
# load packages
library(readit)
library(tidyverse)
# read data
df <- readit::readit("mushroom.txt")
View(df)
?readit
dim(df)
# read data
df <- readit::readit("mushroom.txt", header = F)
?readr
df <- readr("mushroom.txt")
library(readr)
df2 <- read.table("mushroom.txt", header = F, sep = ",")
dim(df2)
View(df2)
# read data
df <- read.table("mushroom.txt", header = F, sep = ",")
dim(df)
?dplyr::select
# read data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4)
View(df)
?case_when
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename(classes = V1, cap-shape = V2, cap-surface = V3, cap-color = V4)
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4)
View(df)
dplyr::case_when
dplyr::case_when()
?dplyr::case_when
test <- c("a", "b", "c")
case_when(test == "a" ~ "a",
test == "b" ~ "damn",
test == "c ~ "c)
case_when(test == "a" ~ "a",
test == "b" ~ "damn",
test == "c" ~ c)
case_when(test == "a" ~ "a",
test == "b" ~ "damn",
test == "c" ~ c)
test
case_when(test == "a" ~ "a",
test == "b" ~ "damn",
TRUE ~ as.character(x))
case_when(test == "a" ~ "a",
test == "b" ~ "damn",
TRUE ~ as.character(test))
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "na"),
cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken")) %>%
head
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "na"),
cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken",
TRUE ~ "na")) %>%
head
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ as.character("na")),
cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken",
TRUE ~ as.character("na"))) %>%
head
read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ as.character("na")),
cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken",
TRUE ~ as.character("na")))
read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others"),
cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken",
TRUE ~ "others"))
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4)
head(df)
?if_else
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others"))
head(df)
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
# not sure why multiple case_when statements cannot be put together inside one mutate function
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others")) %>%
dplyr::mutate(cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken",
TRUE ~ "others")) %>%
head
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
# not sure why multiple case_when statements cannot be put together inside one mutate function
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others")) %>%
dplyr::mutate(cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
cap-shape == "x" ~ "convex",
cap-shape == "f" ~ "flat",
cap-shape == "k" ~ "knobbed",
cap-shape == "s" ~ "sunken",
TRUE ~ "others"))
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
# not sure why multiple case_when statements cannot be put together inside one mutate function
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others"))
df
head(df)
head(df)
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
# not sure why multiple case_when statements cannot be put together inside one mutate function
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others")) %>%
dplyr::mutate(cap-shape = dplyr::case_when(cap-shape == "b" ~ "bell",
cap-shape == "c" ~ "conical",
TRUE ~ "others"))
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
# not sure why multiple case_when statements cannot be put together inside one mutate function
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others")) %>%
dplyr::mutate(`cap-shape` = dplyr::case_when(`cap-shape` == "b" ~ "bell",
`cap-shape`` == "c" ~ "conical",
TRUE ~ "others"))
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
# not sure why multiple case_when statements cannot be put together inside one mutate function
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others")) %>%
dplyr::mutate(`cap-shape` = dplyr::case_when(`cap-shape` == "b" ~ "bell",
`cap-shape` == "c" ~ "conical",
TRUE ~ "others"))
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others"),
`cap-shape` = dplyr::case_when(`cap-shape` == "b" ~ "bell",
`cap-shape` == "c" ~ "conical",
`cap-shape` == "x" ~ "convex",
`cap-shape` == "f" ~ "flat",
`cap-shape` == "k" ~ "knobbed",
`cap-shape` == "s" ~ "sunken",
TRUE ~ "others"),
`cap-surface` = dplyr::case_when(`cap-surface` == "f" ~ "fibrous",
`cap-surface` == "g" ~ "grooves",
`cap-surface` == "y" ~ "scaly",
`cap-surface` == "s" ~ "smooth",
TRUE ~ "others"),
`cap-color` = dplyr::case_when(`cap-color` == "n" ~ "brown",
`cap-color` == "b" ~ "buff",
`cap-color` == "c" ~ "cinnamon",
`cap-color` == "g" ~ "gray",
`cap-color` == "r" ~ "green",
`cap-color` == "p" ~ "pink",
`cap-color` == "u" ~ "purple",
`cap-color` == "e" ~ "red",
`cap-color` == "w" ~ "white",
`cap-color` == "y" ~ "yellow"))
ls()
purrr::map(list(df), function(x) colSums(is.na(x)))
# check missing
purrr::map(list(summary, str), function(x){x(df)})
# check missing
purrr::map(list(summary, str, colSums(is.na(x))), function(x){x(df)})
# check missing
purrr::map(list(summary, str, function(x) {colSums(is.na(x))}), function(x){x(df)})
str(df)
# check missing
purrr::map(list(summary, function(x) {colSums(is.na(x))}), function(x){x(df)})
sapply(df, unique)
# check summary, missing value, unique values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)})), function(x){x(df)})
# check summary, missing value, unique values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}), function(x){x(df)})
# check summary, missing value, unique values by column
purrr::map(list(summary, str,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}), function(x){x(df)})
# check summary, missing value, unique values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}), function(x){x(df)})
ftable(df$classes)
prop.table(ftable(df$classes))
# check summary, missing value, unique values & distribution of values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)},
function(x) {sapply(x, prop.table(ftable(x)))}),
function(x){x(df)})
sapply(df, prop.table(ftable(x)))
sapply(df, function(x) prop.table(ftable(x)))
lapply(df, function(x) prop.table(ftable(x)))
# check summary, missing value, unique values & distribution of values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}),
function(x){x(df)})
sapply(df, function(x) prop.table(ftable(x)))[1]
sapply(df, function(x) prop.table(ftable(x)))[[1]]
sapply(df, function(x) prop.table(ftable(x)))[[1]] %>% barplot
windows()
lapply(sapply(df, function(x) prop.table(ftable(x))), barplot)
par(mfrow = c(2, 2))
lapply(sapply(df, function(x) prop.table(ftable(x))), barplot)
# check summary, missing value, unique values & distribution of values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}),
function(x){x(df)})
sapply(df, function(x) prop.table(ftable(x)))
sapply(df, function(x) prop.table(ftable(x)))
sapply(df, function(x) prop.table(ftable(x))) %>%
print %>%
lapply(., barplot)
windows(); par(mfrow = c(2, 2))
sapply(df, function(x) round(prop.table(ftable(x)), 2)) %>%
print %>%
lapply(., barplot)
windows(); par(mfrow = c(2, 2))
sapply(df, function(x) round(prop.table(ftable(x)), 2)) %>%
print %>%
lapply(., barplot) %>%
invisible
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
# download, read data
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
download.file(url, "mushroom.txt", method = "wininet", quiet = FALSE, mode = "w", cacheOK = TRUE)
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
# select 4 columns only
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others"),
`cap-shape` = dplyr::case_when(`cap-shape` == "b" ~ "bell",
`cap-shape` == "c" ~ "conical",
`cap-shape` == "x" ~ "convex",
`cap-shape` == "f" ~ "flat",
`cap-shape` == "k" ~ "knobbed",
`cap-shape` == "s" ~ "sunken",
TRUE ~ "others"),
`cap-surface` = dplyr::case_when(`cap-surface` == "f" ~ "fibrous",
`cap-surface` == "g" ~ "grooves",
`cap-surface` == "y" ~ "scaly",
`cap-surface` == "s" ~ "smooth",
TRUE ~ "others"),
`cap-color` = dplyr::case_when(`cap-color` == "n" ~ "brown",
`cap-color` == "b" ~ "buff",
`cap-color` == "c" ~ "cinnamon",
`cap-color` == "g" ~ "gray",
`cap-color` == "r" ~ "green",
`cap-color` == "p" ~ "pink",
`cap-color` == "u" ~ "purple",
`cap-color` == "e" ~ "red",
`cap-color` == "w" ~ "white",
`cap-color` == "y" ~ "yellow",
TRUE ~ "others"))
# check summary, missing value & unique values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}),
function(x){x(df)})
# print & plot distribution by column
par(mfrow = c(2, 2))
sapply(df, function(x) round(prop.table(ftable(x)), 2)) %>%
print %>%
lapply(., barplot) %>%
invisible
quit()
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
# download, read data
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
download.file(url, "mushroom.txt", method = "wininet", quiet = FALSE, mode = "w", cacheOK = TRUE)
# read, extract & transform data
df <- read.table("mushroom.txt", header = F, sep = ",") %>%
# select 4 columns only
dplyr::select(V1, V2, V3, V4) %>%
dplyr::rename("classes" = V1, "cap-shape" = V2, "cap-surface" = V3, "cap-color" = V4) %>%
dplyr::mutate(classes = dplyr::case_when(classes == "e" ~ "edible",
classes == "p" ~ "poisonous",
TRUE ~ "others"),
`cap-shape` = dplyr::case_when(`cap-shape` == "b" ~ "bell",
`cap-shape` == "c" ~ "conical",
`cap-shape` == "x" ~ "convex",
`cap-shape` == "f" ~ "flat",
`cap-shape` == "k" ~ "knobbed",
`cap-shape` == "s" ~ "sunken",
TRUE ~ "others"),
`cap-surface` = dplyr::case_when(`cap-surface` == "f" ~ "fibrous",
`cap-surface` == "g" ~ "grooves",
`cap-surface` == "y" ~ "scaly",
`cap-surface` == "s" ~ "smooth",
TRUE ~ "others"),
`cap-color` = dplyr::case_when(`cap-color` == "n" ~ "brown",
`cap-color` == "b" ~ "buff",
`cap-color` == "c" ~ "cinnamon",
`cap-color` == "g" ~ "gray",
`cap-color` == "r" ~ "green",
`cap-color` == "p" ~ "pink",
`cap-color` == "u" ~ "purple",
`cap-color` == "e" ~ "red",
`cap-color` == "w" ~ "white",
`cap-color` == "y" ~ "yellow",
TRUE ~ "others"))
# check summary, missing value & unique values by column
purrr::map(list(summary,
function(x) {colSums(is.na(x))},
function(x) {sapply(x, unique)}),
function(x){x(df)})
# print & plot distribution by column
par(mfrow = c(2, 2))
sapply(df, function(x) round(prop.table(ftable(x)), 2)) %>%
print %>%
lapply(., barplot) %>%
invisible
