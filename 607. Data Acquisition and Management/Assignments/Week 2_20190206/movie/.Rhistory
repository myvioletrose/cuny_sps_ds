unlist(uniqueList[[x]]) %>% as.vector
})
# store each set of data into a data.frame by the length of column
jobListDf <- vector(mode = "list", length = lengthUniqueLength)
for(i in 1:lengthUniqueLength){
jobListDf[[i]] <- jobList[c(uniqueList[[i]])]
}
# jobListDf is now a list of lists (by length of column) in which each list contains a data.frame for each job
# str(jobListDf); summary(jobListDf)
# let's reduce it to a number of list by length of column and make each list a data.frame (combining all jobs inside that list)
putTogether <- function(x){
plyr::ldply(x, data.frame)
}
jobListDf <- lapply(jobListDf, putTogether)
# str(jobListDf)
#########################################################################
### step 3 : clean up each column, inner join back with "links" #######
###############################################################
### CAUTION : there are multiple lists - some have 9 columns, whereas some have only 5 or 6 ###
# let's just look at the complete set (9 columns)
# because the other are missing critical information that we need, e.g. review, salary
extractListNumber <- lapply(1:length(jobListDf), function(x){
length(jobListDf[[x]]) == 9}) %>%
unlist %.>%
which(. == T)
jobDf <- jobListDf[[extractListNumber]] %>%
dplyr::mutate( title = as.character(V1),
company = as.character(V2) %>%
stringr::str_trim(.),
last_updated = stringr::str_extract_all(V3, pattern = "Today|[0-9]+") %>%
unlist %.>%
ifelse(. == "Today", 0, .) %>%
as.numeric %.>%
lapply(1:length(.), function(x){
Sys.Date() -.[x]
}) %>%
unlist %.>%
as.Date(., origin = "1970-01-01"),
glassdoor_est = as.character(V4),
review = stringr::str_extract_all(V6, pattern = "[0-9]\\.[0-9]") %>%
as.numeric,
salary_est = gsub(pattern = ",", replacement = "", V7) %>%
stringr::str_extract_all(., pattern = "[0-9]+") %>%
unlist %>%
as.numeric,
salary_est = salary_est / 1000,
jobListingId = as.character(jobListingId),
description = as.character(V8),
run_time = Sys.time() ) %>%
tidyr::separate(., glassdoor_est, into = c("salary_min_est", "salary_max_est"), sep = "-") %>%
mutate( salary_min_est = stringr::str_extract_all(salary_min_est, pattern = "[0-9]+") %>%
unlist %>%
as.numeric,
salary_max_est = stringr::str_extract_all(salary_max_est, pattern = "[0-9]+") %>%
unlist %>%
as.numeric ) %>%
# inner join it back with "links" to get url pairing with jobListingId
dplyr::inner_join(., links, by = "jobListingId") %>%
dplyr::rename(url = links) %>%
select(jobListingId, title, company, last_updated,
salary_min_est, salary_max_est, salary_est,
review, url, run_time, description) %>%
arrange(company, title, last_updated)
# setwd to data/job
setwd("../"); setwd("data/job")
# save as txt
run_time <- jobDf$run_time %>% unique %.>% gsub(pattern = ":", replacement = "", x = .)
filename <- paste0("jobDf_", run_time, ".txt", sep = "")
write.table(jobDf, file = filename, sep = "\t", row.names = F, append = F)
# reset wd
setwd(currentwd)
###################################################
### step 4 : get, add company overview #######
###########################################
# write a function to search via google for the url pointing to the glassdoor overview database for a company
# wish I can just get an API to query against glassdoor/Indeed database
overview <- function(company){
entity = company
search = "glassdoor company overview"
url = URLencode(paste0("https://www.google.com/search?q=", paste0(entity, search, sep = " ")))
# return top pages result
cite <- read_html(url) %>%
html_nodes("cite") %>%  # change any node you like, e.g. cite
html_text() %>%
as.data.frame(., stringsAsFactors = F) %>%
dplyr::mutate(row = row_number()) %>%
dplyr::rename(url = ".")
# sql hack - return only the "lower(url) like '%glassdoor%overview/working-at%'"
overview_cite_select <- sqldf("select url
from (
select url, min(row) as flag
from ( select url, row
from cite
where lower(url) like '%glassdoor%overview/working-at%' ) x
group by url
) y") %>% as.character
# scrape the company overview
overview <- read_html(overview_cite_select) %>%
html_nodes(".value , .website") %>%
html_text %>%
# dplyr::rename("overview" = ".") %>%
t %>%
as.data.frame %>%
dplyr::mutate(V0 = company) %>%
select(., starts_with("V"))
return(overview)
}
# must use purrr::possibly - fail-safe approach
overview <- purrr::possibly(overview, otherwise = NA_real_)
# start scraping from the list of companies from jobDf
companies <- vector(mode = "list", length = length(unique(jobDf$company)))
names(companies) <- jobDf$company %>% unique
companies <- lapply(1:length(companies), function(x) companies[[x]] <- names(companies)[x])
# system.time( companies <- lapply(1:length(companies), function(x) overview(companies[[x]])) )
system.time( companies <- purrr::map(1:length(companies), function(x) overview(companies[[x]])) )  # a little faster
# remove NA result first
remove <- lapply(1:length(companies), function(x) is.na(companies[x])) %>% unlist %>% which
keep <- c(1:length(companies))[1:length(companies) %nin% remove]
# extract only V0:V7 columns
extract <- function(x){
x <- dplyr::select(x, V0, V1, V2, V3, V4, V5, V6, V7)
return(x)
}
# must use purrr::safely - fail-safe approach
extract_safely <- purrr::safely(extract, otherwise = NA_real_)
# extract, combine into a single df, and then rename columns
companyDf <- purrr::map(companies[keep], extract_safely) %.>%
purrr::transpose(.)
companyDf <- companyDf$result %>%
plyr::ldply(., data.frame)
names(companyDf) <- c("company", "website", "headquarters", "size",
"founded", "type", "industry", "revenue")
# change Factor to Chr, use str_trim to remove white space
companyDf <- companyDf[, 1:8]  # have to subset first; dplyr::select does not allow NA column
companyDf <- companyDf[complete.cases(companyDf), ] %>%
dplyr::mutate( website = as.character(website) %>% stringr::str_trim(.),
headquarters = as.character(headquarters) %>% stringr::str_trim(.),
size = as.character(size) %>% stringr::str_trim(.),
founded = stringr::str_extract_all(founded, "[0-9]+") %>% as.numeric,
type = as.character(type) %.>%
gsub(".*[Pp]rivate.*", "private", .) %.>%
gsub(".*[Pp]ublic.*", "public", .) %>%
stringr::str_trim(.),
industry = as.character(industry) %>% stringr::str_trim(.),
revenue = as.character(revenue) %>% stringr::str_trim(.),
run_time = Sys.time() )
# complete.cases() again, b/c of some misplacing columns
# some jobs have 10 columns and there's some mismatch when we manually pull V1:V7 columns
# for example, "founded" value would be misplaced in the "type" column
# an imperfect and temporary solution is to do complete.cases() one more time to rid the NA
companyDf <- companyDf[complete.cases(companyDf), ]
# setwd to data/company
setwd("../"); setwd("data/company")
# save as txt
run_time2 <- companyDf$run_time %>% unique %.>% gsub(pattern = ":", replacement = "", x = .)
filename2 <- paste0("companyDf_", run_time2, ".txt", sep = "")
write.table(companyDf, file = filename2, sep = "\t", row.names = F, append = F)
# reset wd
setwd(currentwd)
##############################################
##### step 5.1 : update (delete), insert #####
##############################################
setwd("../"); setwd("data")
# load the _agg tables
jobDf_agg <- readRDS(file = "jobDf_agg.RDS")
companyDf_agg <- readRDS(file = "companyDf_agg.RDS")
#######################
# delete, insert, save
# job
jobListingId_agg <- jobDf_agg$jobListingId
jobListingId_now <- jobDf$jobListingId
del <- jobListingId_agg[jobListingId_agg %in% jobListingId_now]
jobDf_agg <- jobDf_agg %>%
dplyr::filter(jobListingId %nin% del) %.>%  # delete
dplyr::bind_rows(., jobDf)  # append
saveRDS(jobDf_agg, file = "jobDf_agg.RDS")  # save
# company
company_agg <- companyDf_agg$company
company_now <- companyDf$company
del2 <- company_agg[company_agg %in% company_now]
companyDf_agg <- companyDf_agg %>%
dplyr::filter(company %nin% del2) %.>%  # delete
dplyr::bind_rows(., companyDf)  # append
saveRDS(companyDf_agg, file = "companyDf_agg.RDS")  # save
#######################
# reset wd
setwd(currentwd)
############################
##### step 5.2 : merge #####
############################
### CAUTION : there is always missing data for some companies overview ###
# let's merge (instead of left join) jobDf_agg and companyDf_agg together
jpr <- merge(jobDf_agg, companyDf_agg, by = "company") %>%
# filter job titles that are not relevant
dplyr::filter(title %in% title[!grepl("(architect|software|engineer|director)", title, ignore.case = T)]) %>%
# filter by job posting last_updated within past 14 days
# dplyr::filter(last_updated > Sys.Date() -14) %>%
# filter out duplicated jobListingId - this happens b/c same job with same Id can have different urls
group_by(jobListingId) %>%
dplyr::mutate(row = row_number()) %>%
ungroup %>%
dplyr::filter(row == 1) %>%
select(jobListingId, title, company, last_updated, salary_min_est, salary_max_est, salary_est, review, url,
website, headquarters, size, founded, type, industry, revenue, description) %>%
arrange(company, title, last_updated)
View(jpr)
rm(list = ls())
setwd("C:/Users/traveler/Desktop/SPS/607. Data Acquisition and Management/Assignments/Week 2_20190206/movie")
movie <- c('Avengers: Infinity War', 'Black Panther', 'Thor',
'Captain America: Civil War', 'Guardians of the Galaxy', 'Ant-Man')
friend <- c('Jayden', 'Ethan', 'Max', 'Jason', 'Eric')
expand.grid(movie, friend)
library(Hmisc)
library(tidyverse)
library(wrapr)
sample(1:5, 30)
sample(30, 1:5)
sample(1:5, 30)
sample(1:5, 30, replace = T)
df <- expand.grid(movie, friend) %>%
data.frame %>%
dplyr::mutate(rating = sample(1:5, 30, replace = T))
df
write.table(x = df, "clipboard", row.names = F)
write.table(x = df, "clipboard", row.names = F, sep = "|")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RMySQL)
# source('pwd.R')  # load password from a separate script
# open connection
mydb = dbConnect(MySQL(), user = 'root', password = 'Wtf12345', dbname = 'movie', host = "localhost")
# list table(s)
dbListTables(mydb)
# load the movie table into R
df <- dbGetQuery(mydb, 'select * from movie')
# source('pwd.R')  # load password from a separate script
# open connection
mydb = dbConnect(MySQL(), user = 'root', password = 'Wtf12345', dbname = 'movie', host = "localhost")
# list table(s)
dbListTables(mydb)
# load the movie table into R
df <- dbGetQuery(mydb, 'select * from movie'); df
# source('pwd.R')  # load password from a separate script
# open connection
mydb = dbConnect(MySQL(), user = 'root', password = 'Wtf12345', dbname = 'movie', host = "localhost")
# list table(s)
dbListTables(mydb)
# load the movie table into R
df <- dbGetQuery(mydb, 'select * from movie'); df
ls()
class(mydb)
df
aggregate(rating ~ movie, data = df, FUN = mean)
aggregate(rating ~ movie, data = df, FUN = mean) %>% arrange(desc(rating))
windows()
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(moive, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating, movie)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(c(rating, movie))), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, -rating, -movie)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, -rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating))), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
windows(0)
windows()
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
df %>%
group_by(friend) %>%
arrange(desc(rating)) %>%
ggplot(., aes(x = movie, y = rating)) +
# ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
df %>%
group_by(friend) %>%
arrange(desc(rating)) %>%
ggplot(., aes(x = movie, y = rating)) +
# ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_grid(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
df %>%
group_by(friend) %>%
arrange(desc(rating)) %>%
ggplot(., aes(x = movie, y = rating)) +
# ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_grid(~friend, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
df %>%
group_by(friend) %>%
arrange(desc(rating)) %>%
ggplot(., aes(x = reorder(movie, desc(rating)), y = rating)) +
# ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_grid(~friend, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each movie rating by friends
ggplot(df, aes(x = reorder(friend, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = movie)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~movie, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
windows()
# Let's look at each movie rating by friends
ggplot(df, aes(x = reorder(friend, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = movie)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~movie, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each movie rating by friends
ggplot(df, aes(x = reorder(friend, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = movie)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~movie, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("friends rating individual movie")
# Let's look at each movie rating by friends
ggplot(df, aes(x = reorder(friend, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = movie)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~movie, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Which one is the best rated movie?
aggregate(rating ~ movie, data = df, FUN = mean) %>% arrange(desc(rating))
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("friends rating individual movie")
# Let's look at each movie rating by friends
ggplot(df, aes(x = reorder(friend, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = movie)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~movie, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
# Which one is the best rated movie?
aggregate(rating ~ movie, data = df, FUN = mean) %>% arrange(desc(rating))
# Let's look at each person rating of individual movie
ggplot(df, aes(x = reorder(movie, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = friend)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~friend, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("friends rating individual movie")
# Let's look at each movie rating by friends
ggplot(df, aes(x = reorder(friend, desc(rating)), y = rating)) +
geom_bar(stat = "identity", aes(fill = movie)) +
labs(x = "", y = "") +
theme(legend.position = "none") +
facet_wrap(~movie, ncol = 3, scales = "free_x") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 15, vjust = .5, hjust = .5)) +
ggtitle("movie rating by friends")
